// Code generated by ogen, DO NOT EDIT.

package tempoapi

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/AnyValue
// AnyValue represents sum type.
type AnyValue struct {
	Type        AnyValueType // switch on this field
	StringValue StringValue
	BoolValue   BoolValue
	IntValue    IntValue
	DoubleValue DoubleValue
	ArrayValue  ArrayValue
	KvlistValue KvlistValue
	BytesValue  BytesValue
}

// AnyValueType is oneOf type of AnyValue.
type AnyValueType string

// Possible values for AnyValueType.
const (
	StringValueAnyValue AnyValueType = "StringValue"
	BoolValueAnyValue   AnyValueType = "BoolValue"
	IntValueAnyValue    AnyValueType = "IntValue"
	DoubleValueAnyValue AnyValueType = "DoubleValue"
	ArrayValueAnyValue  AnyValueType = "ArrayValue"
	KvlistValueAnyValue AnyValueType = "KvlistValue"
	BytesValueAnyValue  AnyValueType = "BytesValue"
)

// IsStringValue reports whether AnyValue is StringValue.
func (s AnyValue) IsStringValue() bool { return s.Type == StringValueAnyValue }

// IsBoolValue reports whether AnyValue is BoolValue.
func (s AnyValue) IsBoolValue() bool { return s.Type == BoolValueAnyValue }

// IsIntValue reports whether AnyValue is IntValue.
func (s AnyValue) IsIntValue() bool { return s.Type == IntValueAnyValue }

// IsDoubleValue reports whether AnyValue is DoubleValue.
func (s AnyValue) IsDoubleValue() bool { return s.Type == DoubleValueAnyValue }

// IsArrayValue reports whether AnyValue is ArrayValue.
func (s AnyValue) IsArrayValue() bool { return s.Type == ArrayValueAnyValue }

// IsKvlistValue reports whether AnyValue is KvlistValue.
func (s AnyValue) IsKvlistValue() bool { return s.Type == KvlistValueAnyValue }

// IsBytesValue reports whether AnyValue is BytesValue.
func (s AnyValue) IsBytesValue() bool { return s.Type == BytesValueAnyValue }

// SetStringValue sets AnyValue to StringValue.
func (s *AnyValue) SetStringValue(v StringValue) {
	s.Type = StringValueAnyValue
	s.StringValue = v
}

// GetStringValue returns StringValue and true boolean if AnyValue is StringValue.
func (s AnyValue) GetStringValue() (v StringValue, ok bool) {
	if !s.IsStringValue() {
		return v, false
	}
	return s.StringValue, true
}

// NewStringValueAnyValue returns new AnyValue from StringValue.
func NewStringValueAnyValue(v StringValue) AnyValue {
	var s AnyValue
	s.SetStringValue(v)
	return s
}

// SetBoolValue sets AnyValue to BoolValue.
func (s *AnyValue) SetBoolValue(v BoolValue) {
	s.Type = BoolValueAnyValue
	s.BoolValue = v
}

// GetBoolValue returns BoolValue and true boolean if AnyValue is BoolValue.
func (s AnyValue) GetBoolValue() (v BoolValue, ok bool) {
	if !s.IsBoolValue() {
		return v, false
	}
	return s.BoolValue, true
}

// NewBoolValueAnyValue returns new AnyValue from BoolValue.
func NewBoolValueAnyValue(v BoolValue) AnyValue {
	var s AnyValue
	s.SetBoolValue(v)
	return s
}

// SetIntValue sets AnyValue to IntValue.
func (s *AnyValue) SetIntValue(v IntValue) {
	s.Type = IntValueAnyValue
	s.IntValue = v
}

// GetIntValue returns IntValue and true boolean if AnyValue is IntValue.
func (s AnyValue) GetIntValue() (v IntValue, ok bool) {
	if !s.IsIntValue() {
		return v, false
	}
	return s.IntValue, true
}

// NewIntValueAnyValue returns new AnyValue from IntValue.
func NewIntValueAnyValue(v IntValue) AnyValue {
	var s AnyValue
	s.SetIntValue(v)
	return s
}

// SetDoubleValue sets AnyValue to DoubleValue.
func (s *AnyValue) SetDoubleValue(v DoubleValue) {
	s.Type = DoubleValueAnyValue
	s.DoubleValue = v
}

// GetDoubleValue returns DoubleValue and true boolean if AnyValue is DoubleValue.
func (s AnyValue) GetDoubleValue() (v DoubleValue, ok bool) {
	if !s.IsDoubleValue() {
		return v, false
	}
	return s.DoubleValue, true
}

// NewDoubleValueAnyValue returns new AnyValue from DoubleValue.
func NewDoubleValueAnyValue(v DoubleValue) AnyValue {
	var s AnyValue
	s.SetDoubleValue(v)
	return s
}

// SetArrayValue sets AnyValue to ArrayValue.
func (s *AnyValue) SetArrayValue(v ArrayValue) {
	s.Type = ArrayValueAnyValue
	s.ArrayValue = v
}

// GetArrayValue returns ArrayValue and true boolean if AnyValue is ArrayValue.
func (s AnyValue) GetArrayValue() (v ArrayValue, ok bool) {
	if !s.IsArrayValue() {
		return v, false
	}
	return s.ArrayValue, true
}

// NewArrayValueAnyValue returns new AnyValue from ArrayValue.
func NewArrayValueAnyValue(v ArrayValue) AnyValue {
	var s AnyValue
	s.SetArrayValue(v)
	return s
}

// SetKvlistValue sets AnyValue to KvlistValue.
func (s *AnyValue) SetKvlistValue(v KvlistValue) {
	s.Type = KvlistValueAnyValue
	s.KvlistValue = v
}

// GetKvlistValue returns KvlistValue and true boolean if AnyValue is KvlistValue.
func (s AnyValue) GetKvlistValue() (v KvlistValue, ok bool) {
	if !s.IsKvlistValue() {
		return v, false
	}
	return s.KvlistValue, true
}

// NewKvlistValueAnyValue returns new AnyValue from KvlistValue.
func NewKvlistValueAnyValue(v KvlistValue) AnyValue {
	var s AnyValue
	s.SetKvlistValue(v)
	return s
}

// SetBytesValue sets AnyValue to BytesValue.
func (s *AnyValue) SetBytesValue(v BytesValue) {
	s.Type = BytesValueAnyValue
	s.BytesValue = v
}

// GetBytesValue returns BytesValue and true boolean if AnyValue is BytesValue.
func (s AnyValue) GetBytesValue() (v BytesValue, ok bool) {
	if !s.IsBytesValue() {
		return v, false
	}
	return s.BytesValue, true
}

// NewBytesValueAnyValue returns new AnyValue from BytesValue.
func NewBytesValueAnyValue(v BytesValue) AnyValue {
	var s AnyValue
	s.SetBytesValue(v)
	return s
}

// Ref: #/components/schemas/ArrayValue
type ArrayValue struct {
	ArrayValue []AnyValue `json:"arrayValue"`
}

// GetArrayValue returns the value of ArrayValue.
func (s *ArrayValue) GetArrayValue() []AnyValue {
	return s.ArrayValue
}

// SetArrayValue sets the value of ArrayValue.
func (s *ArrayValue) SetArrayValue(val []AnyValue) {
	s.ArrayValue = val
}

type Attributes []KeyValue

// Ref: #/components/schemas/Batches
type Batches struct {
	Batches []ResourceSpans `json:"batches"`
}

// GetBatches returns the value of Batches.
func (s *Batches) GetBatches() []ResourceSpans {
	return s.Batches
}

// SetBatches sets the value of Batches.
func (s *Batches) SetBatches(val []ResourceSpans) {
	s.Batches = val
}

// Ref: #/components/schemas/BoolValue
type BoolValue struct {
	BoolValue bool `json:"boolValue"`
}

// GetBoolValue returns the value of BoolValue.
func (s *BoolValue) GetBoolValue() bool {
	return s.BoolValue
}

// SetBoolValue sets the value of BoolValue.
func (s *BoolValue) SetBoolValue(val bool) {
	s.BoolValue = val
}

// Ref: #/components/schemas/BytesValue
type BytesValue struct {
	BytesValue []byte `json:"bytesValue"`
}

// GetBytesValue returns the value of BytesValue.
func (s *BytesValue) GetBytesValue() []byte {
	return s.BytesValue
}

// SetBytesValue sets the value of BytesValue.
func (s *BytesValue) SetBytesValue(val []byte) {
	s.BytesValue = val
}

// Ref: #/components/schemas/DoubleValue
type DoubleValue struct {
	DoubleValue float64 `json:"doubleValue"`
}

// GetDoubleValue returns the value of DoubleValue.
func (s *DoubleValue) GetDoubleValue() float64 {
	return s.DoubleValue
}

// SetDoubleValue sets the value of DoubleValue.
func (s *DoubleValue) SetDoubleValue(val float64) {
	s.DoubleValue = val
}

type DroppedAttributesCount int

type DroppedEventsCount int

type DroppedLinksCount int

type Error string

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/Event
type Event struct {
	TimeUnixNano           OptUnixTimeNano           `json:"timeUnixNano"`
	Name                   OptString                 `json:"name"`
	Attributes             *Attributes               `json:"attributes"`
	DroppedAttributesCount OptDroppedAttributesCount `json:"droppedAttributesCount"`
}

// GetTimeUnixNano returns the value of TimeUnixNano.
func (s *Event) GetTimeUnixNano() OptUnixTimeNano {
	return s.TimeUnixNano
}

// GetName returns the value of Name.
func (s *Event) GetName() OptString {
	return s.Name
}

// GetAttributes returns the value of Attributes.
func (s *Event) GetAttributes() *Attributes {
	return s.Attributes
}

// GetDroppedAttributesCount returns the value of DroppedAttributesCount.
func (s *Event) GetDroppedAttributesCount() OptDroppedAttributesCount {
	return s.DroppedAttributesCount
}

// SetTimeUnixNano sets the value of TimeUnixNano.
func (s *Event) SetTimeUnixNano(val OptUnixTimeNano) {
	s.TimeUnixNano = val
}

// SetName sets the value of Name.
func (s *Event) SetName(val OptString) {
	s.Name = val
}

// SetAttributes sets the value of Attributes.
func (s *Event) SetAttributes(val *Attributes) {
	s.Attributes = val
}

// SetDroppedAttributesCount sets the value of DroppedAttributesCount.
func (s *Event) SetDroppedAttributesCount(val OptDroppedAttributesCount) {
	s.DroppedAttributesCount = val
}

// Ref: #/components/schemas/InstrumentationScope
type InstrumentationScope struct {
	Name                   OptString                 `json:"name"`
	Version                OptString                 `json:"version"`
	Attributes             *Attributes               `json:"attributes"`
	DroppedAttributesCount OptDroppedAttributesCount `json:"droppedAttributesCount"`
}

// GetName returns the value of Name.
func (s *InstrumentationScope) GetName() OptString {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *InstrumentationScope) GetVersion() OptString {
	return s.Version
}

// GetAttributes returns the value of Attributes.
func (s *InstrumentationScope) GetAttributes() *Attributes {
	return s.Attributes
}

// GetDroppedAttributesCount returns the value of DroppedAttributesCount.
func (s *InstrumentationScope) GetDroppedAttributesCount() OptDroppedAttributesCount {
	return s.DroppedAttributesCount
}

// SetName sets the value of Name.
func (s *InstrumentationScope) SetName(val OptString) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *InstrumentationScope) SetVersion(val OptString) {
	s.Version = val
}

// SetAttributes sets the value of Attributes.
func (s *InstrumentationScope) SetAttributes(val *Attributes) {
	s.Attributes = val
}

// SetDroppedAttributesCount sets the value of DroppedAttributesCount.
func (s *InstrumentationScope) SetDroppedAttributesCount(val OptDroppedAttributesCount) {
	s.DroppedAttributesCount = val
}

// Ref: #/components/schemas/IntValue
type IntValue struct {
	IntValue int64 `json:"intValue"`
}

// GetIntValue returns the value of IntValue.
func (s *IntValue) GetIntValue() int64 {
	return s.IntValue
}

// SetIntValue sets the value of IntValue.
func (s *IntValue) SetIntValue(val int64) {
	s.IntValue = val
}

// Ref: #/components/schemas/KeyValue
type KeyValue struct {
	Key   string   `json:"key"`
	Value AnyValue `json:"value"`
}

// GetKey returns the value of Key.
func (s *KeyValue) GetKey() string {
	return s.Key
}

// GetValue returns the value of Value.
func (s *KeyValue) GetValue() AnyValue {
	return s.Value
}

// SetKey sets the value of Key.
func (s *KeyValue) SetKey(val string) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *KeyValue) SetValue(val AnyValue) {
	s.Value = val
}

// Ref: #/components/schemas/KvlistValue
type KvlistValue struct {
	KvlistValue []KeyValue `json:"kvlistValue"`
}

// GetKvlistValue returns the value of KvlistValue.
func (s *KvlistValue) GetKvlistValue() []KeyValue {
	return s.KvlistValue
}

// SetKvlistValue sets the value of KvlistValue.
func (s *KvlistValue) SetKvlistValue(val []KeyValue) {
	s.KvlistValue = val
}

// Ref: #/components/schemas/Link
type Link struct {
	TraceId                OptTraceId                `json:"traceId"`
	SpanId                 OptSpanId                 `json:"spanId"`
	TraceState             OptString                 `json:"traceState"`
	Attributes             *Attributes               `json:"attributes"`
	DroppedAttributesCount OptDroppedAttributesCount `json:"droppedAttributesCount"`
}

// GetTraceId returns the value of TraceId.
func (s *Link) GetTraceId() OptTraceId {
	return s.TraceId
}

// GetSpanId returns the value of SpanId.
func (s *Link) GetSpanId() OptSpanId {
	return s.SpanId
}

// GetTraceState returns the value of TraceState.
func (s *Link) GetTraceState() OptString {
	return s.TraceState
}

// GetAttributes returns the value of Attributes.
func (s *Link) GetAttributes() *Attributes {
	return s.Attributes
}

// GetDroppedAttributesCount returns the value of DroppedAttributesCount.
func (s *Link) GetDroppedAttributesCount() OptDroppedAttributesCount {
	return s.DroppedAttributesCount
}

// SetTraceId sets the value of TraceId.
func (s *Link) SetTraceId(val OptTraceId) {
	s.TraceId = val
}

// SetSpanId sets the value of SpanId.
func (s *Link) SetSpanId(val OptSpanId) {
	s.SpanId = val
}

// SetTraceState sets the value of TraceState.
func (s *Link) SetTraceState(val OptString) {
	s.TraceState = val
}

// SetAttributes sets the value of Attributes.
func (s *Link) SetAttributes(val *Attributes) {
	s.Attributes = val
}

// SetDroppedAttributesCount sets the value of DroppedAttributesCount.
func (s *Link) SetDroppedAttributesCount(val OptDroppedAttributesCount) {
	s.DroppedAttributesCount = val
}

// NewOptDroppedAttributesCount returns new OptDroppedAttributesCount with value set to v.
func NewOptDroppedAttributesCount(v DroppedAttributesCount) OptDroppedAttributesCount {
	return OptDroppedAttributesCount{
		Value: v,
		Set:   true,
	}
}

// OptDroppedAttributesCount is optional DroppedAttributesCount.
type OptDroppedAttributesCount struct {
	Value DroppedAttributesCount
	Set   bool
}

// IsSet returns true if OptDroppedAttributesCount was set.
func (o OptDroppedAttributesCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDroppedAttributesCount) Reset() {
	var v DroppedAttributesCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDroppedAttributesCount) SetTo(v DroppedAttributesCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDroppedAttributesCount) Get() (v DroppedAttributesCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDroppedAttributesCount) Or(d DroppedAttributesCount) DroppedAttributesCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDroppedEventsCount returns new OptDroppedEventsCount with value set to v.
func NewOptDroppedEventsCount(v DroppedEventsCount) OptDroppedEventsCount {
	return OptDroppedEventsCount{
		Value: v,
		Set:   true,
	}
}

// OptDroppedEventsCount is optional DroppedEventsCount.
type OptDroppedEventsCount struct {
	Value DroppedEventsCount
	Set   bool
}

// IsSet returns true if OptDroppedEventsCount was set.
func (o OptDroppedEventsCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDroppedEventsCount) Reset() {
	var v DroppedEventsCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDroppedEventsCount) SetTo(v DroppedEventsCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDroppedEventsCount) Get() (v DroppedEventsCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDroppedEventsCount) Or(d DroppedEventsCount) DroppedEventsCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDroppedLinksCount returns new OptDroppedLinksCount with value set to v.
func NewOptDroppedLinksCount(v DroppedLinksCount) OptDroppedLinksCount {
	return OptDroppedLinksCount{
		Value: v,
		Set:   true,
	}
}

// OptDroppedLinksCount is optional DroppedLinksCount.
type OptDroppedLinksCount struct {
	Value DroppedLinksCount
	Set   bool
}

// IsSet returns true if OptDroppedLinksCount was set.
func (o OptDroppedLinksCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDroppedLinksCount) Reset() {
	var v DroppedLinksCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDroppedLinksCount) SetTo(v DroppedLinksCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDroppedLinksCount) Get() (v DroppedLinksCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDroppedLinksCount) Or(d DroppedLinksCount) DroppedLinksCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDuration returns new OptDuration with value set to v.
func NewOptDuration(v time.Duration) OptDuration {
	return OptDuration{
		Value: v,
		Set:   true,
	}
}

// OptDuration is optional time.Duration.
type OptDuration struct {
	Value time.Duration
	Set   bool
}

// IsSet returns true if OptDuration was set.
func (o OptDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDuration) Reset() {
	var v time.Duration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDuration) SetTo(v time.Duration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDuration) Get() (v time.Duration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDuration) Or(d time.Duration) time.Duration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstrumentationScope returns new OptInstrumentationScope with value set to v.
func NewOptInstrumentationScope(v InstrumentationScope) OptInstrumentationScope {
	return OptInstrumentationScope{
		Value: v,
		Set:   true,
	}
}

// OptInstrumentationScope is optional InstrumentationScope.
type OptInstrumentationScope struct {
	Value InstrumentationScope
	Set   bool
}

// IsSet returns true if OptInstrumentationScope was set.
func (o OptInstrumentationScope) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstrumentationScope) Reset() {
	var v InstrumentationScope
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstrumentationScope) SetTo(v InstrumentationScope) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstrumentationScope) Get() (v InstrumentationScope, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstrumentationScope) Or(d InstrumentationScope) InstrumentationScope {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResource returns new OptResource with value set to v.
func NewOptResource(v Resource) OptResource {
	return OptResource{
		Value: v,
		Set:   true,
	}
}

// OptResource is optional Resource.
type OptResource struct {
	Value Resource
	Set   bool
}

// IsSet returns true if OptResource was set.
func (o OptResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResource) Reset() {
	var v Resource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResource) SetTo(v Resource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResource) Get() (v Resource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResource) Or(d Resource) Resource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpanId returns new OptSpanId with value set to v.
func NewOptSpanId(v SpanId) OptSpanId {
	return OptSpanId{
		Value: v,
		Set:   true,
	}
}

// OptSpanId is optional SpanId.
type OptSpanId struct {
	Value SpanId
	Set   bool
}

// IsSet returns true if OptSpanId was set.
func (o OptSpanId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpanId) Reset() {
	var v SpanId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpanId) SetTo(v SpanId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpanId) Get() (v SpanId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpanId) Or(d SpanId) SpanId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatus returns new OptStatus with value set to v.
func NewOptStatus(v Status) OptStatus {
	return OptStatus{
		Value: v,
		Set:   true,
	}
}

// OptStatus is optional Status.
type OptStatus struct {
	Value Status
	Set   bool
}

// IsSet returns true if OptStatus was set.
func (o OptStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatus) Reset() {
	var v Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatus) SetTo(v Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatus) Get() (v Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatus) Or(d Status) Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatusCode returns new OptStatusCode with value set to v.
func NewOptStatusCode(v StatusCode) OptStatusCode {
	return OptStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptStatusCode is optional StatusCode.
type OptStatusCode struct {
	Value StatusCode
	Set   bool
}

// IsSet returns true if OptStatusCode was set.
func (o OptStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatusCode) Reset() {
	var v StatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatusCode) SetTo(v StatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatusCode) Get() (v StatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatusCode) Or(d StatusCode) StatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTraceId returns new OptTraceId with value set to v.
func NewOptTraceId(v TraceId) OptTraceId {
	return OptTraceId{
		Value: v,
		Set:   true,
	}
}

// OptTraceId is optional TraceId.
type OptTraceId struct {
	Value TraceId
	Set   bool
}

// IsSet returns true if OptTraceId was set.
func (o OptTraceId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTraceId) Reset() {
	var v TraceId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTraceId) SetTo(v TraceId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTraceId) Get() (v TraceId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTraceId) Or(d TraceId) TraceId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUnixSeconds returns new OptUnixSeconds with value set to v.
func NewOptUnixSeconds(v time.Time) OptUnixSeconds {
	return OptUnixSeconds{
		Value: v,
		Set:   true,
	}
}

// OptUnixSeconds is optional time.Time.
type OptUnixSeconds struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptUnixSeconds was set.
func (o OptUnixSeconds) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUnixSeconds) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUnixSeconds) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUnixSeconds) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUnixSeconds) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUnixTimeNano returns new OptUnixTimeNano with value set to v.
func NewOptUnixTimeNano(v UnixTimeNano) OptUnixTimeNano {
	return OptUnixTimeNano{
		Value: v,
		Set:   true,
	}
}

// OptUnixTimeNano is optional UnixTimeNano.
type OptUnixTimeNano struct {
	Value UnixTimeNano
	Set   bool
}

// IsSet returns true if OptUnixTimeNano was set.
func (o OptUnixTimeNano) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUnixTimeNano) Reset() {
	var v UnixTimeNano
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUnixTimeNano) SetTo(v UnixTimeNano) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUnixTimeNano) Get() (v UnixTimeNano, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUnixTimeNano) Or(d UnixTimeNano) UnixTimeNano {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Resource
type Resource struct {
	Attributes             *Attributes               `json:"attributes"`
	DroppedAttributesCount OptDroppedAttributesCount `json:"droppedAttributesCount"`
}

// GetAttributes returns the value of Attributes.
func (s *Resource) GetAttributes() *Attributes {
	return s.Attributes
}

// GetDroppedAttributesCount returns the value of DroppedAttributesCount.
func (s *Resource) GetDroppedAttributesCount() OptDroppedAttributesCount {
	return s.DroppedAttributesCount
}

// SetAttributes sets the value of Attributes.
func (s *Resource) SetAttributes(val *Attributes) {
	s.Attributes = val
}

// SetDroppedAttributesCount sets the value of DroppedAttributesCount.
func (s *Resource) SetDroppedAttributesCount(val OptDroppedAttributesCount) {
	s.DroppedAttributesCount = val
}

// Ref: #/components/schemas/ResourceSpans
type ResourceSpans struct {
	Resource   OptResource  `json:"resource"`
	ScopeSpans []ScopeSpans `json:"scopeSpans"`
	SchemaUrl  OptString    `json:"schemaUrl"`
}

// GetResource returns the value of Resource.
func (s *ResourceSpans) GetResource() OptResource {
	return s.Resource
}

// GetScopeSpans returns the value of ScopeSpans.
func (s *ResourceSpans) GetScopeSpans() []ScopeSpans {
	return s.ScopeSpans
}

// GetSchemaUrl returns the value of SchemaUrl.
func (s *ResourceSpans) GetSchemaUrl() OptString {
	return s.SchemaUrl
}

// SetResource sets the value of Resource.
func (s *ResourceSpans) SetResource(val OptResource) {
	s.Resource = val
}

// SetScopeSpans sets the value of ScopeSpans.
func (s *ResourceSpans) SetScopeSpans(val []ScopeSpans) {
	s.ScopeSpans = val
}

// SetSchemaUrl sets the value of SchemaUrl.
func (s *ResourceSpans) SetSchemaUrl(val OptString) {
	s.SchemaUrl = val
}

// Ref: #/components/schemas/ScopeSpans
type ScopeSpans struct {
	Scope     OptInstrumentationScope `json:"scope"`
	Spans     []Span                  `json:"spans"`
	SchemaUrl OptString               `json:"schemaUrl"`
}

// GetScope returns the value of Scope.
func (s *ScopeSpans) GetScope() OptInstrumentationScope {
	return s.Scope
}

// GetSpans returns the value of Spans.
func (s *ScopeSpans) GetSpans() []Span {
	return s.Spans
}

// GetSchemaUrl returns the value of SchemaUrl.
func (s *ScopeSpans) GetSchemaUrl() OptString {
	return s.SchemaUrl
}

// SetScope sets the value of Scope.
func (s *ScopeSpans) SetScope(val OptInstrumentationScope) {
	s.Scope = val
}

// SetSpans sets the value of Spans.
func (s *ScopeSpans) SetSpans(val []Span) {
	s.Spans = val
}

// SetSchemaUrl sets the value of SchemaUrl.
func (s *ScopeSpans) SetSchemaUrl(val OptString) {
	s.SchemaUrl = val
}

// Ref: #/components/schemas/Span
type Span struct {
	TraceId                TraceId                   `json:"traceId"`
	SpanId                 SpanId                    `json:"spanId"`
	TraceState             OptString                 `json:"traceState"`
	ParentSpanId           []byte                    `json:"parentSpanId"`
	Name                   string                    `json:"name"`
	Kind                   SpanKind                  `json:"kind"`
	StartTimeUnixNano      UnixTimeNano              `json:"startTimeUnixNano"`
	EndTimeUnixNano        UnixTimeNano              `json:"endTimeUnixNano"`
	Attributes             *Attributes               `json:"attributes"`
	DroppedAttributesCount OptDroppedAttributesCount `json:"droppedAttributesCount"`
	Events                 []Event                   `json:"events"`
	DroppedEventsCount     OptDroppedEventsCount     `json:"droppedEventsCount"`
	Links                  []Link                    `json:"links"`
	DroppedLinksCount      OptDroppedLinksCount      `json:"droppedLinksCount"`
	Status                 OptStatus                 `json:"status"`
}

// GetTraceId returns the value of TraceId.
func (s *Span) GetTraceId() TraceId {
	return s.TraceId
}

// GetSpanId returns the value of SpanId.
func (s *Span) GetSpanId() SpanId {
	return s.SpanId
}

// GetTraceState returns the value of TraceState.
func (s *Span) GetTraceState() OptString {
	return s.TraceState
}

// GetParentSpanId returns the value of ParentSpanId.
func (s *Span) GetParentSpanId() []byte {
	return s.ParentSpanId
}

// GetName returns the value of Name.
func (s *Span) GetName() string {
	return s.Name
}

// GetKind returns the value of Kind.
func (s *Span) GetKind() SpanKind {
	return s.Kind
}

// GetStartTimeUnixNano returns the value of StartTimeUnixNano.
func (s *Span) GetStartTimeUnixNano() UnixTimeNano {
	return s.StartTimeUnixNano
}

// GetEndTimeUnixNano returns the value of EndTimeUnixNano.
func (s *Span) GetEndTimeUnixNano() UnixTimeNano {
	return s.EndTimeUnixNano
}

// GetAttributes returns the value of Attributes.
func (s *Span) GetAttributes() *Attributes {
	return s.Attributes
}

// GetDroppedAttributesCount returns the value of DroppedAttributesCount.
func (s *Span) GetDroppedAttributesCount() OptDroppedAttributesCount {
	return s.DroppedAttributesCount
}

// GetEvents returns the value of Events.
func (s *Span) GetEvents() []Event {
	return s.Events
}

// GetDroppedEventsCount returns the value of DroppedEventsCount.
func (s *Span) GetDroppedEventsCount() OptDroppedEventsCount {
	return s.DroppedEventsCount
}

// GetLinks returns the value of Links.
func (s *Span) GetLinks() []Link {
	return s.Links
}

// GetDroppedLinksCount returns the value of DroppedLinksCount.
func (s *Span) GetDroppedLinksCount() OptDroppedLinksCount {
	return s.DroppedLinksCount
}

// GetStatus returns the value of Status.
func (s *Span) GetStatus() OptStatus {
	return s.Status
}

// SetTraceId sets the value of TraceId.
func (s *Span) SetTraceId(val TraceId) {
	s.TraceId = val
}

// SetSpanId sets the value of SpanId.
func (s *Span) SetSpanId(val SpanId) {
	s.SpanId = val
}

// SetTraceState sets the value of TraceState.
func (s *Span) SetTraceState(val OptString) {
	s.TraceState = val
}

// SetParentSpanId sets the value of ParentSpanId.
func (s *Span) SetParentSpanId(val []byte) {
	s.ParentSpanId = val
}

// SetName sets the value of Name.
func (s *Span) SetName(val string) {
	s.Name = val
}

// SetKind sets the value of Kind.
func (s *Span) SetKind(val SpanKind) {
	s.Kind = val
}

// SetStartTimeUnixNano sets the value of StartTimeUnixNano.
func (s *Span) SetStartTimeUnixNano(val UnixTimeNano) {
	s.StartTimeUnixNano = val
}

// SetEndTimeUnixNano sets the value of EndTimeUnixNano.
func (s *Span) SetEndTimeUnixNano(val UnixTimeNano) {
	s.EndTimeUnixNano = val
}

// SetAttributes sets the value of Attributes.
func (s *Span) SetAttributes(val *Attributes) {
	s.Attributes = val
}

// SetDroppedAttributesCount sets the value of DroppedAttributesCount.
func (s *Span) SetDroppedAttributesCount(val OptDroppedAttributesCount) {
	s.DroppedAttributesCount = val
}

// SetEvents sets the value of Events.
func (s *Span) SetEvents(val []Event) {
	s.Events = val
}

// SetDroppedEventsCount sets the value of DroppedEventsCount.
func (s *Span) SetDroppedEventsCount(val OptDroppedEventsCount) {
	s.DroppedEventsCount = val
}

// SetLinks sets the value of Links.
func (s *Span) SetLinks(val []Link) {
	s.Links = val
}

// SetDroppedLinksCount sets the value of DroppedLinksCount.
func (s *Span) SetDroppedLinksCount(val OptDroppedLinksCount) {
	s.DroppedLinksCount = val
}

// SetStatus sets the value of Status.
func (s *Span) SetStatus(val OptStatus) {
	s.Status = val
}

type SpanId []byte

// Ref: #/components/schemas/SpanKind
type SpanKind string

const (
	SpanKindSPANKINDUNSPECIFIED SpanKind = "SPAN_KIND_UNSPECIFIED"
	SpanKindSPANKINDINTERNAL    SpanKind = "SPAN_KIND_INTERNAL"
	SpanKindSPANKINDSERVER      SpanKind = "SPAN_KIND_SERVER"
	SpanKindSPANKINDCLIENT      SpanKind = "SPAN_KIND_CLIENT"
	SpanKindSPANKINDPRODUCER    SpanKind = "SPAN_KIND_PRODUCER"
	SpanKindSPANKINDCONSUMER    SpanKind = "SPAN_KIND_CONSUMER"
)

// MarshalText implements encoding.TextMarshaler.
func (s SpanKind) MarshalText() ([]byte, error) {
	switch s {
	case SpanKindSPANKINDUNSPECIFIED:
		return []byte(s), nil
	case SpanKindSPANKINDINTERNAL:
		return []byte(s), nil
	case SpanKindSPANKINDSERVER:
		return []byte(s), nil
	case SpanKindSPANKINDCLIENT:
		return []byte(s), nil
	case SpanKindSPANKINDPRODUCER:
		return []byte(s), nil
	case SpanKindSPANKINDCONSUMER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpanKind) UnmarshalText(data []byte) error {
	switch SpanKind(data) {
	case SpanKindSPANKINDUNSPECIFIED:
		*s = SpanKindSPANKINDUNSPECIFIED
		return nil
	case SpanKindSPANKINDINTERNAL:
		*s = SpanKindSPANKINDINTERNAL
		return nil
	case SpanKindSPANKINDSERVER:
		*s = SpanKindSPANKINDSERVER
		return nil
	case SpanKindSPANKINDCLIENT:
		*s = SpanKindSPANKINDCLIENT
		return nil
	case SpanKindSPANKINDPRODUCER:
		*s = SpanKindSPANKINDPRODUCER
		return nil
	case SpanKindSPANKINDCONSUMER:
		*s = SpanKindSPANKINDCONSUMER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Status
type Status struct {
	Message OptString     `json:"message"`
	Code    OptStatusCode `json:"code"`
}

// GetMessage returns the value of Message.
func (s *Status) GetMessage() OptString {
	return s.Message
}

// GetCode returns the value of Code.
func (s *Status) GetCode() OptStatusCode {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *Status) SetMessage(val OptString) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *Status) SetCode(val OptStatusCode) {
	s.Code = val
}

// Ref: #/components/schemas/StatusCode
type StatusCode string

const (
	StatusCodeSTATUSCODEUNSET StatusCode = "STATUS_CODE_UNSET"
	StatusCodeSTATUSCODEOK    StatusCode = "STATUS_CODE_OK"
	StatusCodeSTATUSCODEERROR StatusCode = "STATUS_CODE_ERROR"
)

// MarshalText implements encoding.TextMarshaler.
func (s StatusCode) MarshalText() ([]byte, error) {
	switch s {
	case StatusCodeSTATUSCODEUNSET:
		return []byte(s), nil
	case StatusCodeSTATUSCODEOK:
		return []byte(s), nil
	case StatusCodeSTATUSCODEERROR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StatusCode) UnmarshalText(data []byte) error {
	switch StatusCode(data) {
	case StatusCodeSTATUSCODEUNSET:
		*s = StatusCodeSTATUSCODEUNSET
		return nil
	case StatusCodeSTATUSCODEOK:
		*s = StatusCodeSTATUSCODEOK
		return nil
	case StatusCodeSTATUSCODEERROR:
		*s = StatusCodeSTATUSCODEERROR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StringValue
type StringValue struct {
	StringValue string `json:"stringValue"`
}

// GetStringValue returns the value of StringValue.
func (s *StringValue) GetStringValue() string {
	return s.StringValue
}

// SetStringValue sets the value of StringValue.
func (s *StringValue) SetStringValue(val string) {
	s.StringValue = val
}

// Ref: #/components/schemas/TagNames
type TagNames struct {
	TagNames []string `json:"tagNames"`
}

// GetTagNames returns the value of TagNames.
func (s *TagNames) GetTagNames() []string {
	return s.TagNames
}

// SetTagNames sets the value of TagNames.
func (s *TagNames) SetTagNames(val []string) {
	s.TagNames = val
}

// Ref: #/components/schemas/TagValue
type TagValue struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

// GetType returns the value of Type.
func (s *TagValue) GetType() string {
	return s.Type
}

// GetValue returns the value of Value.
func (s *TagValue) GetValue() string {
	return s.Value
}

// SetType sets the value of Type.
func (s *TagValue) SetType(val string) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *TagValue) SetValue(val string) {
	s.Value = val
}

// Ref: #/components/schemas/TagValues
type TagValues struct {
	TagValues []string `json:"tagValues"`
}

// GetTagValues returns the value of TagValues.
func (s *TagValues) GetTagValues() []string {
	return s.TagValues
}

// SetTagValues sets the value of TagValues.
func (s *TagValues) SetTagValues(val []string) {
	s.TagValues = val
}

// Ref: #/components/schemas/TagValuesV2
type TagValuesV2 struct {
	TagValues []TagValue `json:"tagValues"`
}

// GetTagValues returns the value of TagValues.
func (s *TagValuesV2) GetTagValues() []TagValue {
	return s.TagValues
}

// SetTagValues sets the value of TagValues.
func (s *TagValuesV2) SetTagValues(val []TagValue) {
	s.TagValues = val
}

type TraceId []byte

// Ref: #/components/schemas/Traces
type Traces struct {
	Traces []ResourceSpans `json:"traces"`
}

// GetTraces returns the value of Traces.
func (s *Traces) GetTraces() []ResourceSpans {
	return s.Traces
}

// SetTraces sets the value of Traces.
func (s *Traces) SetTraces(val []ResourceSpans) {
	s.Traces = val
}

type UnixTimeNano time.Time
