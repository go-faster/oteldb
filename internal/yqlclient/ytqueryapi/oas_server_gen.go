// Code generated by ogen, DO NOT EDIT.

package ytqueryapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AbortQuery implements abortQuery operation.
	//
	// Abort running query.
	//
	// POST /api/v4/abort_query
	AbortQuery(ctx context.Context, params AbortQueryParams) error
	// GetQuery implements getQuery operation.
	//
	// Gets query status.
	//
	// POST /api/v4/get_query
	GetQuery(ctx context.Context, params GetQueryParams) (*QueryStatus, error)
	// ReadQueryResult implements readQueryResult operation.
	//
	// Read query result.
	//
	// POST /api/v4/read_query_result
	ReadQueryResult(ctx context.Context, params ReadQueryResultParams) (QueryResult, error)
	// StartQuery implements startQuery operation.
	//
	// Start a new query.
	//
	// POST /api/v4/start_query
	StartQuery(ctx context.Context, params StartQueryParams) (*StartedQuery, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
