// Code generated by ogen, DO NOT EDIT.

package ytqueryapi

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestAbortedQuery_EncodeDecode(t *testing.T) {
	var typ AbortedQuery
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AbortedQuery
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAttributes_EncodeDecode(t *testing.T) {
	var typ Attributes
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Attributes
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEngine_EncodeDecode(t *testing.T) {
	var typ Engine
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Engine
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestError_EncodeDecode(t *testing.T) {
	var typ Error
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Error
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOperationState_EncodeDecode(t *testing.T) {
	var typ OperationState
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OperationState
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestQueryID_EncodeDecode(t *testing.T) {
	var typ QueryID
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 QueryID
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestQueryStatus_EncodeDecode(t *testing.T) {
	var typ QueryStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 QueryStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestQueryStatusAnnotations_EncodeDecode(t *testing.T) {
	var typ QueryStatusAnnotations
	typ = make(QueryStatusAnnotations)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 QueryStatusAnnotations
	typ2 = make(QueryStatusAnnotations)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestQueryStatusProgress_EncodeDecode(t *testing.T) {
	var typ QueryStatusProgress
	typ = make(QueryStatusProgress)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 QueryStatusProgress
	typ2 = make(QueryStatusProgress)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestQueryStatusSettings_EncodeDecode(t *testing.T) {
	var typ QueryStatusSettings
	typ = make(QueryStatusSettings)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 QueryStatusSettings
	typ2 = make(QueryStatusSettings)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestStartedQuery_EncodeDecode(t *testing.T) {
	var typ StartedQuery
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 StartedQuery
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
