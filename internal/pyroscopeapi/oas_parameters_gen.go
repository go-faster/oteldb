// Code generated by ogen, DO NOT EDIT.

package pyroscopeapi

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// LabelValuesParams is parameters of labelValues operation.
type LabelValuesParams struct {
	// Label to lookup values.
	Label string
	// Start of time range in `attime` format.
	// For now, Pyroscope ignores parameter, if `query` is not set.
	From OptAtTime
	// End of time range in `attime` format.
	// For now, Pyroscope ignores parameter, if `query` is not set.
	Until OptAtTime
	// FrameQL query.
	Query OptString
}

func unpackLabelValuesParams(packed middleware.Parameters) (params LabelValuesParams) {
	{
		key := middleware.ParameterKey{
			Name: "label",
			In:   "query",
		}
		params.Label = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.From = v.(OptAtTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "until",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Until = v.(OptAtTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Query = v.(OptString)
		}
	}
	return params
}

func decodeLabelValuesParams(args [0]string, argsEscaped bool, r *http.Request) (params LabelValuesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: label.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "label",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Label = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "label",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFromVal AtTime
				if err := func() error {
					var paramsDotFromValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotFromValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotFromVal = AtTime(paramsDotFromValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.From.SetTo(paramsDotFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: until.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "until",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUntilVal AtTime
				if err := func() error {
					var paramsDotUntilValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotUntilValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotUntilVal = AtTime(paramsDotUntilValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Until.SetTo(paramsDotUntilVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "until",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQueryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Query.SetTo(paramsDotQueryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// LabelsParams is parameters of labels operation.
type LabelsParams struct {
	// Start of time range in `attime` format.
	// For now, Pyroscope ignores parameter, if `query` is not set.
	From OptAtTime
	// End of time range in `attime` format.
	// For now, Pyroscope ignores parameter, if `query` is not set.
	Until OptAtTime
	// FrameQL query.
	Query OptString
}

func unpackLabelsParams(packed middleware.Parameters) (params LabelsParams) {
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.From = v.(OptAtTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "until",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Until = v.(OptAtTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Query = v.(OptString)
		}
	}
	return params
}

func decodeLabelsParams(args [0]string, argsEscaped bool, r *http.Request) (params LabelsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFromVal AtTime
				if err := func() error {
					var paramsDotFromValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotFromValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotFromVal = AtTime(paramsDotFromValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.From.SetTo(paramsDotFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: until.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "until",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUntilVal AtTime
				if err := func() error {
					var paramsDotUntilValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotUntilValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotUntilVal = AtTime(paramsDotUntilValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Until.SetTo(paramsDotUntilVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "until",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQueryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Query.SetTo(paramsDotQueryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// RenderParams is parameters of render operation.
type RenderParams struct {
	// Start of time range in `attime` format.
	From OptAtTime
	// End of time range in `attime` format.
	Until OptAtTime
	// FrameQL query.
	Query OptString
	// Segment key.
	// See https://github.
	// com/grafana/pyroscope/blob/e1c9c18fa0c9398f07a2d1184d5de02a270872cd/pkg/storage/segment/key.
	// go#L36-L36.
	Name     OptString
	GroupBy  OptString
	MaxNodes OptInt
	// Response format.
	Format RenderFormat
}

func unpackRenderParams(packed middleware.Parameters) (params RenderParams) {
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.From = v.(OptAtTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "until",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Until = v.(OptAtTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Query = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Name = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "groupBy",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.GroupBy = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "maxNodes",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MaxNodes = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "format",
			In:   "query",
		}
		params.Format = packed[key].(RenderFormat)
	}
	return params
}

func decodeRenderParams(args [0]string, argsEscaped bool, r *http.Request) (params RenderParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFromVal AtTime
				if err := func() error {
					var paramsDotFromValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotFromValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotFromVal = AtTime(paramsDotFromValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.From.SetTo(paramsDotFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: until.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "until",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUntilVal AtTime
				if err := func() error {
					var paramsDotUntilValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotUntilValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotUntilVal = AtTime(paramsDotUntilValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Until.SetTo(paramsDotUntilVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "until",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQueryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Query.SetTo(paramsDotQueryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name.SetTo(paramsDotNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: groupBy.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "groupBy",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGroupByVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGroupByVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.GroupBy.SetTo(paramsDotGroupByVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupBy",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: maxNodes.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "maxNodes",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMaxNodesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotMaxNodesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MaxNodes.SetTo(paramsDotMaxNodesVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "maxNodes",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: format.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "format",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Format = RenderFormat(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Format.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "format",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
