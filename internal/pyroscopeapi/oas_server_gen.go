// Code generated by ogen, DO NOT EDIT.

package pyroscopeapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetApps implements getApps operation.
	//
	// Returns list of application metadata.
	// Used by Grafana to test connection to Pyroscope.
	//
	// GET /api/apps
	GetApps(ctx context.Context) ([]ApplicationMetadata, error)
	// Ingest implements ingest operation.
	//
	// Push data to Pyroscope.
	//
	// POST /ingest
	Ingest(ctx context.Context, req *IngestReqWithContentType, params IngestParams) error
	// LabelValues implements labelValues operation.
	//
	// Returns list of label values.
	//
	// GET /label-values
	LabelValues(ctx context.Context, params LabelValuesParams) (LabelValues, error)
	// Labels implements labels operation.
	//
	// Returns list of labels.
	//
	// GET /labels
	Labels(ctx context.Context, params LabelsParams) (Labels, error)
	// Render implements render operation.
	//
	// Renders given query.
	// One of `query` or `key` is required.
	//
	// GET /render
	Render(ctx context.Context, params RenderParams) (*FlamebearerProfileV1, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
