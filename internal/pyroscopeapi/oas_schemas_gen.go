// Code generated by ogen, DO NOT EDIT.

package pyroscopeapi

import (
	"fmt"
	"io"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/ApplicationMetadata
type ApplicationMetadata struct {
	Name       OptString                   `json:"name"`
	SpyName    OptString                   `json:"spyName"`
	SampleRate OptUint32                   `json:"sampleRate"`
	Units      OptApplicationMetadataUnits `json:"units"`
}

// GetName returns the value of Name.
func (s *ApplicationMetadata) GetName() OptString {
	return s.Name
}

// GetSpyName returns the value of SpyName.
func (s *ApplicationMetadata) GetSpyName() OptString {
	return s.SpyName
}

// GetSampleRate returns the value of SampleRate.
func (s *ApplicationMetadata) GetSampleRate() OptUint32 {
	return s.SampleRate
}

// GetUnits returns the value of Units.
func (s *ApplicationMetadata) GetUnits() OptApplicationMetadataUnits {
	return s.Units
}

// SetName sets the value of Name.
func (s *ApplicationMetadata) SetName(val OptString) {
	s.Name = val
}

// SetSpyName sets the value of SpyName.
func (s *ApplicationMetadata) SetSpyName(val OptString) {
	s.SpyName = val
}

// SetSampleRate sets the value of SampleRate.
func (s *ApplicationMetadata) SetSampleRate(val OptUint32) {
	s.SampleRate = val
}

// SetUnits sets the value of Units.
func (s *ApplicationMetadata) SetUnits(val OptApplicationMetadataUnits) {
	s.Units = val
}

type ApplicationMetadataUnits string

const (
	ApplicationMetadataUnitsSamples         ApplicationMetadataUnits = "samples"
	ApplicationMetadataUnitsObjects         ApplicationMetadataUnits = "objects"
	ApplicationMetadataUnitsGoroutines      ApplicationMetadataUnits = "goroutines"
	ApplicationMetadataUnitsBytes           ApplicationMetadataUnits = "bytes"
	ApplicationMetadataUnitsLockNanoseconds ApplicationMetadataUnits = "lock_nanoseconds"
	ApplicationMetadataUnitsLockSamples     ApplicationMetadataUnits = "lock_samples"
)

// AllValues returns all ApplicationMetadataUnits values.
func (ApplicationMetadataUnits) AllValues() []ApplicationMetadataUnits {
	return []ApplicationMetadataUnits{
		ApplicationMetadataUnitsSamples,
		ApplicationMetadataUnitsObjects,
		ApplicationMetadataUnitsGoroutines,
		ApplicationMetadataUnitsBytes,
		ApplicationMetadataUnitsLockNanoseconds,
		ApplicationMetadataUnitsLockSamples,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApplicationMetadataUnits) MarshalText() ([]byte, error) {
	switch s {
	case ApplicationMetadataUnitsSamples:
		return []byte(s), nil
	case ApplicationMetadataUnitsObjects:
		return []byte(s), nil
	case ApplicationMetadataUnitsGoroutines:
		return []byte(s), nil
	case ApplicationMetadataUnitsBytes:
		return []byte(s), nil
	case ApplicationMetadataUnitsLockNanoseconds:
		return []byte(s), nil
	case ApplicationMetadataUnitsLockSamples:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApplicationMetadataUnits) UnmarshalText(data []byte) error {
	switch ApplicationMetadataUnits(data) {
	case ApplicationMetadataUnitsSamples:
		*s = ApplicationMetadataUnitsSamples
		return nil
	case ApplicationMetadataUnitsObjects:
		*s = ApplicationMetadataUnitsObjects
		return nil
	case ApplicationMetadataUnitsGoroutines:
		*s = ApplicationMetadataUnitsGoroutines
		return nil
	case ApplicationMetadataUnitsBytes:
		*s = ApplicationMetadataUnitsBytes
		return nil
	case ApplicationMetadataUnitsLockNanoseconds:
		*s = ApplicationMetadataUnitsLockNanoseconds
		return nil
	case ApplicationMetadataUnitsLockSamples:
		*s = ApplicationMetadataUnitsLockSamples
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AtTime string

type Error string

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/FlamebearerMetadataV1
type FlamebearerMetadataV1 struct {
	Name       OptString                     `json:"name"`
	SpyName    OptString                     `json:"spyName"`
	SampleRate OptUint32                     `json:"sampleRate"`
	Units      OptFlamebearerMetadataV1Units `json:"units"`
	Format     string                        `json:"format"`
}

// GetName returns the value of Name.
func (s *FlamebearerMetadataV1) GetName() OptString {
	return s.Name
}

// GetSpyName returns the value of SpyName.
func (s *FlamebearerMetadataV1) GetSpyName() OptString {
	return s.SpyName
}

// GetSampleRate returns the value of SampleRate.
func (s *FlamebearerMetadataV1) GetSampleRate() OptUint32 {
	return s.SampleRate
}

// GetUnits returns the value of Units.
func (s *FlamebearerMetadataV1) GetUnits() OptFlamebearerMetadataV1Units {
	return s.Units
}

// GetFormat returns the value of Format.
func (s *FlamebearerMetadataV1) GetFormat() string {
	return s.Format
}

// SetName sets the value of Name.
func (s *FlamebearerMetadataV1) SetName(val OptString) {
	s.Name = val
}

// SetSpyName sets the value of SpyName.
func (s *FlamebearerMetadataV1) SetSpyName(val OptString) {
	s.SpyName = val
}

// SetSampleRate sets the value of SampleRate.
func (s *FlamebearerMetadataV1) SetSampleRate(val OptUint32) {
	s.SampleRate = val
}

// SetUnits sets the value of Units.
func (s *FlamebearerMetadataV1) SetUnits(val OptFlamebearerMetadataV1Units) {
	s.Units = val
}

// SetFormat sets the value of Format.
func (s *FlamebearerMetadataV1) SetFormat(val string) {
	s.Format = val
}

type FlamebearerMetadataV1Units string

const (
	FlamebearerMetadataV1UnitsSamples         FlamebearerMetadataV1Units = "samples"
	FlamebearerMetadataV1UnitsObjects         FlamebearerMetadataV1Units = "objects"
	FlamebearerMetadataV1UnitsGoroutines      FlamebearerMetadataV1Units = "goroutines"
	FlamebearerMetadataV1UnitsBytes           FlamebearerMetadataV1Units = "bytes"
	FlamebearerMetadataV1UnitsLockNanoseconds FlamebearerMetadataV1Units = "lock_nanoseconds"
	FlamebearerMetadataV1UnitsLockSamples     FlamebearerMetadataV1Units = "lock_samples"
)

// AllValues returns all FlamebearerMetadataV1Units values.
func (FlamebearerMetadataV1Units) AllValues() []FlamebearerMetadataV1Units {
	return []FlamebearerMetadataV1Units{
		FlamebearerMetadataV1UnitsSamples,
		FlamebearerMetadataV1UnitsObjects,
		FlamebearerMetadataV1UnitsGoroutines,
		FlamebearerMetadataV1UnitsBytes,
		FlamebearerMetadataV1UnitsLockNanoseconds,
		FlamebearerMetadataV1UnitsLockSamples,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FlamebearerMetadataV1Units) MarshalText() ([]byte, error) {
	switch s {
	case FlamebearerMetadataV1UnitsSamples:
		return []byte(s), nil
	case FlamebearerMetadataV1UnitsObjects:
		return []byte(s), nil
	case FlamebearerMetadataV1UnitsGoroutines:
		return []byte(s), nil
	case FlamebearerMetadataV1UnitsBytes:
		return []byte(s), nil
	case FlamebearerMetadataV1UnitsLockNanoseconds:
		return []byte(s), nil
	case FlamebearerMetadataV1UnitsLockSamples:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FlamebearerMetadataV1Units) UnmarshalText(data []byte) error {
	switch FlamebearerMetadataV1Units(data) {
	case FlamebearerMetadataV1UnitsSamples:
		*s = FlamebearerMetadataV1UnitsSamples
		return nil
	case FlamebearerMetadataV1UnitsObjects:
		*s = FlamebearerMetadataV1UnitsObjects
		return nil
	case FlamebearerMetadataV1UnitsGoroutines:
		*s = FlamebearerMetadataV1UnitsGoroutines
		return nil
	case FlamebearerMetadataV1UnitsBytes:
		*s = FlamebearerMetadataV1UnitsBytes
		return nil
	case FlamebearerMetadataV1UnitsLockNanoseconds:
		*s = FlamebearerMetadataV1UnitsLockNanoseconds
		return nil
	case FlamebearerMetadataV1UnitsLockSamples:
		*s = FlamebearerMetadataV1UnitsLockSamples
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/FlamebearerProfileV1
type FlamebearerProfileV1 struct {
	Flamebearer FlamebearerV1                 `json:"flamebearer"`
	Metadata    FlamebearerMetadataV1         `json:"metadata"`
	Timeline    OptFlamebearerTimelineV1      `json:"timeline"`
	Groups      OptFlamebearerProfileV1Groups `json:"groups"`
	Heatmap     OptNilHeatmap                 `json:"heatmap"`
	LeftTicks   OptUint64                     `json:"leftTicks"`
	RightTicks  OptUint64                     `json:"rightTicks"`
}

// GetFlamebearer returns the value of Flamebearer.
func (s *FlamebearerProfileV1) GetFlamebearer() FlamebearerV1 {
	return s.Flamebearer
}

// GetMetadata returns the value of Metadata.
func (s *FlamebearerProfileV1) GetMetadata() FlamebearerMetadataV1 {
	return s.Metadata
}

// GetTimeline returns the value of Timeline.
func (s *FlamebearerProfileV1) GetTimeline() OptFlamebearerTimelineV1 {
	return s.Timeline
}

// GetGroups returns the value of Groups.
func (s *FlamebearerProfileV1) GetGroups() OptFlamebearerProfileV1Groups {
	return s.Groups
}

// GetHeatmap returns the value of Heatmap.
func (s *FlamebearerProfileV1) GetHeatmap() OptNilHeatmap {
	return s.Heatmap
}

// GetLeftTicks returns the value of LeftTicks.
func (s *FlamebearerProfileV1) GetLeftTicks() OptUint64 {
	return s.LeftTicks
}

// GetRightTicks returns the value of RightTicks.
func (s *FlamebearerProfileV1) GetRightTicks() OptUint64 {
	return s.RightTicks
}

// SetFlamebearer sets the value of Flamebearer.
func (s *FlamebearerProfileV1) SetFlamebearer(val FlamebearerV1) {
	s.Flamebearer = val
}

// SetMetadata sets the value of Metadata.
func (s *FlamebearerProfileV1) SetMetadata(val FlamebearerMetadataV1) {
	s.Metadata = val
}

// SetTimeline sets the value of Timeline.
func (s *FlamebearerProfileV1) SetTimeline(val OptFlamebearerTimelineV1) {
	s.Timeline = val
}

// SetGroups sets the value of Groups.
func (s *FlamebearerProfileV1) SetGroups(val OptFlamebearerProfileV1Groups) {
	s.Groups = val
}

// SetHeatmap sets the value of Heatmap.
func (s *FlamebearerProfileV1) SetHeatmap(val OptNilHeatmap) {
	s.Heatmap = val
}

// SetLeftTicks sets the value of LeftTicks.
func (s *FlamebearerProfileV1) SetLeftTicks(val OptUint64) {
	s.LeftTicks = val
}

// SetRightTicks sets the value of RightTicks.
func (s *FlamebearerProfileV1) SetRightTicks(val OptUint64) {
	s.RightTicks = val
}

type FlamebearerProfileV1Groups map[string]FlamebearerTimelineV1

func (s *FlamebearerProfileV1Groups) init() FlamebearerProfileV1Groups {
	m := *s
	if m == nil {
		m = map[string]FlamebearerTimelineV1{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/FlamebearerTimelineV1
type FlamebearerTimelineV1 struct {
	// Time at which the timeline starts, as a Unix timestamp.
	StartTime int64 `json:"startTime"`
	// A sequence of samples starting at startTime, spaced by durationDelta seconds.
	Samples []uint64 `json:"samples"`
	// Time delta between samples, in seconds.
	DurationDelta int64                              `json:"durationDelta"`
	Watermarks    OptFlamebearerTimelineV1Watermarks `json:"watermarks"`
}

// GetStartTime returns the value of StartTime.
func (s *FlamebearerTimelineV1) GetStartTime() int64 {
	return s.StartTime
}

// GetSamples returns the value of Samples.
func (s *FlamebearerTimelineV1) GetSamples() []uint64 {
	return s.Samples
}

// GetDurationDelta returns the value of DurationDelta.
func (s *FlamebearerTimelineV1) GetDurationDelta() int64 {
	return s.DurationDelta
}

// GetWatermarks returns the value of Watermarks.
func (s *FlamebearerTimelineV1) GetWatermarks() OptFlamebearerTimelineV1Watermarks {
	return s.Watermarks
}

// SetStartTime sets the value of StartTime.
func (s *FlamebearerTimelineV1) SetStartTime(val int64) {
	s.StartTime = val
}

// SetSamples sets the value of Samples.
func (s *FlamebearerTimelineV1) SetSamples(val []uint64) {
	s.Samples = val
}

// SetDurationDelta sets the value of DurationDelta.
func (s *FlamebearerTimelineV1) SetDurationDelta(val int64) {
	s.DurationDelta = val
}

// SetWatermarks sets the value of Watermarks.
func (s *FlamebearerTimelineV1) SetWatermarks(val OptFlamebearerTimelineV1Watermarks) {
	s.Watermarks = val
}

type FlamebearerTimelineV1Watermarks map[string]int64

func (s *FlamebearerTimelineV1Watermarks) init() FlamebearerTimelineV1Watermarks {
	m := *s
	if m == nil {
		m = map[string]int64{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/FlamebearerV1
type FlamebearerV1 struct {
	// Names is the sequence of symbol names.
	Names []string `json:"names"`
	// Levels contains the flamebearer nodes. Each level represents a row in the flamegraph.
	// For each row / level, there's a sequence of values. These values are grouped in chunks
	// which size depend on the flamebearer format: 4 for "single", 7 for "double".
	// For "single" format, each chunk has the following data:
	// i+0 = x offset (prefix sum of the level total values), delta encoded.
	// i+1 = total samples (including the samples in its children nodes).
	// i+2 = self samples (excluding the samples in its children nodes).
	// i+3 = index in names array
	// For "double" format, each chunk has the following data:
	// i+0 = x offset (prefix sum of the level total values), delta encoded, base / left tree.
	// i+1 = total samples (including the samples in its children nodes)   , base / left tree.
	// i+2 = self samples (excluding the samples in its children nodes)    , base / left tree.
	// i+3 = x offset (prefix sum of the level total values), delta encoded, diff / right tree.
	// i+4 = total samples (including the samples in its children nodes)   , diff / right tree.
	// i+5 = self samples (excluding the samples in its children nodes)    , diff / right tree.
	// i+6 = index in the names array.
	Levels   [][]int `json:"levels"`
	NumTicks int     `json:"numTicks"`
	MaxSelf  int     `json:"maxSelf"`
}

// GetNames returns the value of Names.
func (s *FlamebearerV1) GetNames() []string {
	return s.Names
}

// GetLevels returns the value of Levels.
func (s *FlamebearerV1) GetLevels() [][]int {
	return s.Levels
}

// GetNumTicks returns the value of NumTicks.
func (s *FlamebearerV1) GetNumTicks() int {
	return s.NumTicks
}

// GetMaxSelf returns the value of MaxSelf.
func (s *FlamebearerV1) GetMaxSelf() int {
	return s.MaxSelf
}

// SetNames sets the value of Names.
func (s *FlamebearerV1) SetNames(val []string) {
	s.Names = val
}

// SetLevels sets the value of Levels.
func (s *FlamebearerV1) SetLevels(val [][]int) {
	s.Levels = val
}

// SetNumTicks sets the value of NumTicks.
func (s *FlamebearerV1) SetNumTicks(val int) {
	s.NumTicks = val
}

// SetMaxSelf sets the value of MaxSelf.
func (s *FlamebearerV1) SetMaxSelf(val int) {
	s.MaxSelf = val
}

// Ref: #/components/schemas/Heatmap
type Heatmap struct {
	// Values matrix contain values that indicate count of value occurrences,
	// satisfying boundaries of X and Y bins: [StartTime:EndTime) and (MinValue:MaxValue].
	// A value can be accessed via Values[x][y], where:
	// 0 <= x < TimeBuckets, and
	// 0 <= y < ValueBuckets.
	Values [][]uint64 `json:"values"`
	// TimeBuckets denote number of bins on X axis.
	// Length of Values array.
	TimeBuckets OptInt64 `json:"timeBuckets"`
	// ValueBuckets denote number of bins on Y axis.
	// Length of any item in the Values array.
	ValueBuckets OptInt64 `json:"valueBuckets"`
	// StartTime and EndTime indicate boundaries of X axis: [StartTime:EndTime).
	StartTime OptInt64 `json:"startTime"`
	EndTime   OptInt64 `json:"endTime"`
	// MinValue and MaxValue indicate boundaries of Y axis: (MinValue:MaxValue].
	MinValue OptUint64 `json:"minValue"`
	MaxValue OptUint64 `json:"maxValue"`
	// MinDepth and MaxDepth indicate boundaries of Z axis: [MinDepth:MaxDepth].
	// MinDepth is the minimal non-zero value that can be found in Values.
	MinDepth OptUint64 `json:"minDepth"`
	MaxDepth OptUint64 `json:"maxDepth"`
}

// GetValues returns the value of Values.
func (s *Heatmap) GetValues() [][]uint64 {
	return s.Values
}

// GetTimeBuckets returns the value of TimeBuckets.
func (s *Heatmap) GetTimeBuckets() OptInt64 {
	return s.TimeBuckets
}

// GetValueBuckets returns the value of ValueBuckets.
func (s *Heatmap) GetValueBuckets() OptInt64 {
	return s.ValueBuckets
}

// GetStartTime returns the value of StartTime.
func (s *Heatmap) GetStartTime() OptInt64 {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *Heatmap) GetEndTime() OptInt64 {
	return s.EndTime
}

// GetMinValue returns the value of MinValue.
func (s *Heatmap) GetMinValue() OptUint64 {
	return s.MinValue
}

// GetMaxValue returns the value of MaxValue.
func (s *Heatmap) GetMaxValue() OptUint64 {
	return s.MaxValue
}

// GetMinDepth returns the value of MinDepth.
func (s *Heatmap) GetMinDepth() OptUint64 {
	return s.MinDepth
}

// GetMaxDepth returns the value of MaxDepth.
func (s *Heatmap) GetMaxDepth() OptUint64 {
	return s.MaxDepth
}

// SetValues sets the value of Values.
func (s *Heatmap) SetValues(val [][]uint64) {
	s.Values = val
}

// SetTimeBuckets sets the value of TimeBuckets.
func (s *Heatmap) SetTimeBuckets(val OptInt64) {
	s.TimeBuckets = val
}

// SetValueBuckets sets the value of ValueBuckets.
func (s *Heatmap) SetValueBuckets(val OptInt64) {
	s.ValueBuckets = val
}

// SetStartTime sets the value of StartTime.
func (s *Heatmap) SetStartTime(val OptInt64) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *Heatmap) SetEndTime(val OptInt64) {
	s.EndTime = val
}

// SetMinValue sets the value of MinValue.
func (s *Heatmap) SetMinValue(val OptUint64) {
	s.MinValue = val
}

// SetMaxValue sets the value of MaxValue.
func (s *Heatmap) SetMaxValue(val OptUint64) {
	s.MaxValue = val
}

// SetMinDepth sets the value of MinDepth.
func (s *Heatmap) SetMinDepth(val OptUint64) {
	s.MinDepth = val
}

// SetMaxDepth sets the value of MaxDepth.
func (s *Heatmap) SetMaxDepth(val OptUint64) {
	s.MaxDepth = val
}

// IngestOK is response for Ingest operation.
type IngestOK struct{}

type IngestReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s IngestReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// IngestReqWithContentType wraps IngestReq with Content-Type.
type IngestReqWithContentType struct {
	ContentType string
	Content     IngestReq
}

// GetContentType returns the value of ContentType.
func (s *IngestReqWithContentType) GetContentType() string {
	return s.ContentType
}

// GetContent returns the value of Content.
func (s *IngestReqWithContentType) GetContent() IngestReq {
	return s.Content
}

// SetContentType sets the value of ContentType.
func (s *IngestReqWithContentType) SetContentType(val string) {
	s.ContentType = val
}

// SetContent sets the value of Content.
func (s *IngestReqWithContentType) SetContent(val IngestReq) {
	s.Content = val
}

type LabelValues []string

type Labels []string

// NewOptApplicationMetadataUnits returns new OptApplicationMetadataUnits with value set to v.
func NewOptApplicationMetadataUnits(v ApplicationMetadataUnits) OptApplicationMetadataUnits {
	return OptApplicationMetadataUnits{
		Value: v,
		Set:   true,
	}
}

// OptApplicationMetadataUnits is optional ApplicationMetadataUnits.
type OptApplicationMetadataUnits struct {
	Value ApplicationMetadataUnits
	Set   bool
}

// IsSet returns true if OptApplicationMetadataUnits was set.
func (o OptApplicationMetadataUnits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApplicationMetadataUnits) Reset() {
	var v ApplicationMetadataUnits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApplicationMetadataUnits) SetTo(v ApplicationMetadataUnits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApplicationMetadataUnits) Get() (v ApplicationMetadataUnits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApplicationMetadataUnits) Or(d ApplicationMetadataUnits) ApplicationMetadataUnits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAtTime returns new OptAtTime with value set to v.
func NewOptAtTime(v AtTime) OptAtTime {
	return OptAtTime{
		Value: v,
		Set:   true,
	}
}

// OptAtTime is optional AtTime.
type OptAtTime struct {
	Value AtTime
	Set   bool
}

// IsSet returns true if OptAtTime was set.
func (o OptAtTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAtTime) Reset() {
	var v AtTime
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAtTime) SetTo(v AtTime) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAtTime) Get() (v AtTime, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAtTime) Or(d AtTime) AtTime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFlamebearerMetadataV1Units returns new OptFlamebearerMetadataV1Units with value set to v.
func NewOptFlamebearerMetadataV1Units(v FlamebearerMetadataV1Units) OptFlamebearerMetadataV1Units {
	return OptFlamebearerMetadataV1Units{
		Value: v,
		Set:   true,
	}
}

// OptFlamebearerMetadataV1Units is optional FlamebearerMetadataV1Units.
type OptFlamebearerMetadataV1Units struct {
	Value FlamebearerMetadataV1Units
	Set   bool
}

// IsSet returns true if OptFlamebearerMetadataV1Units was set.
func (o OptFlamebearerMetadataV1Units) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFlamebearerMetadataV1Units) Reset() {
	var v FlamebearerMetadataV1Units
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFlamebearerMetadataV1Units) SetTo(v FlamebearerMetadataV1Units) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFlamebearerMetadataV1Units) Get() (v FlamebearerMetadataV1Units, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFlamebearerMetadataV1Units) Or(d FlamebearerMetadataV1Units) FlamebearerMetadataV1Units {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFlamebearerProfileV1Groups returns new OptFlamebearerProfileV1Groups with value set to v.
func NewOptFlamebearerProfileV1Groups(v FlamebearerProfileV1Groups) OptFlamebearerProfileV1Groups {
	return OptFlamebearerProfileV1Groups{
		Value: v,
		Set:   true,
	}
}

// OptFlamebearerProfileV1Groups is optional FlamebearerProfileV1Groups.
type OptFlamebearerProfileV1Groups struct {
	Value FlamebearerProfileV1Groups
	Set   bool
}

// IsSet returns true if OptFlamebearerProfileV1Groups was set.
func (o OptFlamebearerProfileV1Groups) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFlamebearerProfileV1Groups) Reset() {
	var v FlamebearerProfileV1Groups
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFlamebearerProfileV1Groups) SetTo(v FlamebearerProfileV1Groups) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFlamebearerProfileV1Groups) Get() (v FlamebearerProfileV1Groups, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFlamebearerProfileV1Groups) Or(d FlamebearerProfileV1Groups) FlamebearerProfileV1Groups {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFlamebearerTimelineV1 returns new OptFlamebearerTimelineV1 with value set to v.
func NewOptFlamebearerTimelineV1(v FlamebearerTimelineV1) OptFlamebearerTimelineV1 {
	return OptFlamebearerTimelineV1{
		Value: v,
		Set:   true,
	}
}

// OptFlamebearerTimelineV1 is optional FlamebearerTimelineV1.
type OptFlamebearerTimelineV1 struct {
	Value FlamebearerTimelineV1
	Set   bool
}

// IsSet returns true if OptFlamebearerTimelineV1 was set.
func (o OptFlamebearerTimelineV1) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFlamebearerTimelineV1) Reset() {
	var v FlamebearerTimelineV1
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFlamebearerTimelineV1) SetTo(v FlamebearerTimelineV1) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFlamebearerTimelineV1) Get() (v FlamebearerTimelineV1, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFlamebearerTimelineV1) Or(d FlamebearerTimelineV1) FlamebearerTimelineV1 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFlamebearerTimelineV1Watermarks returns new OptFlamebearerTimelineV1Watermarks with value set to v.
func NewOptFlamebearerTimelineV1Watermarks(v FlamebearerTimelineV1Watermarks) OptFlamebearerTimelineV1Watermarks {
	return OptFlamebearerTimelineV1Watermarks{
		Value: v,
		Set:   true,
	}
}

// OptFlamebearerTimelineV1Watermarks is optional FlamebearerTimelineV1Watermarks.
type OptFlamebearerTimelineV1Watermarks struct {
	Value FlamebearerTimelineV1Watermarks
	Set   bool
}

// IsSet returns true if OptFlamebearerTimelineV1Watermarks was set.
func (o OptFlamebearerTimelineV1Watermarks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFlamebearerTimelineV1Watermarks) Reset() {
	var v FlamebearerTimelineV1Watermarks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFlamebearerTimelineV1Watermarks) SetTo(v FlamebearerTimelineV1Watermarks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFlamebearerTimelineV1Watermarks) Get() (v FlamebearerTimelineV1Watermarks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFlamebearerTimelineV1Watermarks) Or(d FlamebearerTimelineV1Watermarks) FlamebearerTimelineV1Watermarks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHeatmap returns new OptNilHeatmap with value set to v.
func NewOptNilHeatmap(v Heatmap) OptNilHeatmap {
	return OptNilHeatmap{
		Value: v,
		Set:   true,
	}
}

// OptNilHeatmap is optional nullable Heatmap.
type OptNilHeatmap struct {
	Value Heatmap
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHeatmap was set.
func (o OptNilHeatmap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHeatmap) Reset() {
	var v Heatmap
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHeatmap) SetTo(v Heatmap) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHeatmap) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHeatmap) SetToNull() {
	o.Set = true
	o.Null = true
	var v Heatmap
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHeatmap) Get() (v Heatmap, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHeatmap) Or(d Heatmap) Heatmap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSegmentKey returns new OptSegmentKey with value set to v.
func NewOptSegmentKey(v SegmentKey) OptSegmentKey {
	return OptSegmentKey{
		Value: v,
		Set:   true,
	}
}

// OptSegmentKey is optional SegmentKey.
type OptSegmentKey struct {
	Value SegmentKey
	Set   bool
}

// IsSet returns true if OptSegmentKey was set.
func (o OptSegmentKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSegmentKey) Reset() {
	var v SegmentKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSegmentKey) SetTo(v SegmentKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSegmentKey) Get() (v SegmentKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSegmentKey) Or(d SegmentKey) SegmentKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint32 returns new OptUint32 with value set to v.
func NewOptUint32(v uint32) OptUint32 {
	return OptUint32{
		Value: v,
		Set:   true,
	}
}

// OptUint32 is optional uint32.
type OptUint32 struct {
	Value uint32
	Set   bool
}

// IsSet returns true if OptUint32 was set.
func (o OptUint32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint32) Reset() {
	var v uint32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint32) SetTo(v uint32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint32) Get() (v uint32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint32) Or(d uint32) uint32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint64 returns new OptUint64 with value set to v.
func NewOptUint64(v uint64) OptUint64 {
	return OptUint64{
		Value: v,
		Set:   true,
	}
}

// OptUint64 is optional uint64.
type OptUint64 struct {
	Value uint64
	Set   bool
}

// IsSet returns true if OptUint64 was set.
func (o OptUint64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint64) Reset() {
	var v uint64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint64) SetTo(v uint64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint64) Get() (v uint64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint64) Or(d uint64) uint64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type RenderFormat string

const (
	RenderFormatJSON      RenderFormat = "json"
	RenderFormatPprof     RenderFormat = "pprof"
	RenderFormatCollapsed RenderFormat = "collapsed"
	RenderFormatHTML      RenderFormat = "html"
)

// AllValues returns all RenderFormat values.
func (RenderFormat) AllValues() []RenderFormat {
	return []RenderFormat{
		RenderFormatJSON,
		RenderFormatPprof,
		RenderFormatCollapsed,
		RenderFormatHTML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RenderFormat) MarshalText() ([]byte, error) {
	switch s {
	case RenderFormatJSON:
		return []byte(s), nil
	case RenderFormatPprof:
		return []byte(s), nil
	case RenderFormatCollapsed:
		return []byte(s), nil
	case RenderFormatHTML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RenderFormat) UnmarshalText(data []byte) error {
	switch RenderFormat(data) {
	case RenderFormatJSON:
		*s = RenderFormatJSON
		return nil
	case RenderFormatPprof:
		*s = RenderFormatPprof
		return nil
	case RenderFormatCollapsed:
		*s = RenderFormatCollapsed
		return nil
	case RenderFormatHTML:
		*s = RenderFormatHTML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SegmentKey string
