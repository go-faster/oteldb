// Code generated by ogen, DO NOT EDIT.

package promapi

import (
	"fmt"

	"github.com/go-faster/jx"
)

// SetFake set fake values.
func (s *Data) SetFake() {
	var variant Matrix

	{
		variant.SetFake()
	}
	s.SetMatrix(variant)
}

// SetFake set fake values.
func (s *Exemplar) SetFake() {
	{
		{
			s.Labels.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
	{
		{
			s.Timestamp.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Exemplars) SetFake() {
	var unwrapped []ExemplarsSet
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ExemplarsSet
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = Exemplars(unwrapped)
}

// SetFake set fake values.
func (s *ExemplarsSet) SetFake() {
	{
		{
			s.SeriesLabels.SetFake()
		}
	}
	{
		{
			s.Exemplars = nil
			for i := 0; i < 0; i++ {
				var elem Exemplar
				{
					elem.SetFake()
				}
				s.Exemplars = append(s.Exemplars, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *Fail) SetFake() {
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Error = "string"
		}
	}
	{
		{
			s.ErrorType.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FailErrorType) SetFake() {
	*s = FailErrorTypeTimeout
}

// SetFake set fake values.
func (s *LabelSet) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *LabelValues) SetFake() {
	var unwrapped []string
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem string
			{
				elem = "string"
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = LabelValues(unwrapped)
}

// SetFake set fake values.
func (s *LabelValuesResponse) SetFake() {
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Warnings = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Warnings = append(s.Warnings, elem)
			}
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Labels) SetFake() {
	var unwrapped []string
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem string
			{
				elem = "string"
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = Labels(unwrapped)
}

// SetFake set fake values.
func (s *LabelsResponse) SetFake() {
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Warnings = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Warnings = append(s.Warnings, elem)
			}
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Matrix) SetFake() {
	{
		{
			s.Result = nil
			for i := 0; i < 0; i++ {
				var elem MatrixResultItem
				{
					elem.SetFake()
				}
				s.Result = append(s.Result, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *MatrixResultItem) SetFake() {
	{
		{
			s.Metric.SetFake()
		}
	}
	{
		{
			s.Values = nil
			for i := 0; i < 0; i++ {
				var elem Value
				{
					elem.SetFake()
				}
				s.Values = append(s.Values, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *MatrixResultItemMetric) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Metadata) SetFake() {
	var (
		elem []MetadataItemItem
		m    map[string][]MetadataItemItem = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *MetadataItemItem) SetFake() {
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Help.SetFake()
		}
	}
	{
		{
			s.Unit.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MetadataItemItemType) SetFake() {
	*s = MetadataItemItemTypeCounter
}

// SetFake set fake values.
func (s *MetadataResponse) SetFake() {
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Warnings = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Warnings = append(s.Warnings, elem)
			}
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OptData) SetFake() {
	var elem Data
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFloat64) SetFake() {
	var elem float64
	{
		elem = float64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt) SetFake() {
	var elem int
	{
		elem = int(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt64) SetFake() {
	var elem int64
	{
		elem = int64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptLabelSet) SetFake() {
	var elem LabelSet
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMetadataItemItemType) SetFake() {
	var elem MetadataItemItemType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptString) SetFake() {
	var elem string
	{
		elem = "string"
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *QueryExemplarsResponse) SetFake() {
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Warnings = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Warnings = append(s.Warnings, elem)
			}
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *QueryResponse) SetFake() {
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Warnings = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Warnings = append(s.Warnings, elem)
			}
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Rule) SetFake() {
	var unwrapped jx.Raw
	{
		unwrapped = []byte("null")
	}
	*s = Rule(unwrapped)
}

// SetFake set fake values.
func (s *RuleGroup) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.File.SetFake()
		}
	}
	{
		{
			s.Rules = nil
			for i := 0; i < 0; i++ {
				var elem Rule
				{
					elem.SetFake()
				}
				s.Rules = append(s.Rules, elem)
			}
		}
	}
	{
		{
			s.Internal.SetFake()
		}
	}
	{
		{
			s.Limit.SetFake()
		}
	}
	{
		{
			s.EvaluationTime.SetFake()
		}
	}
	{
		{
			s.LastEvaluation.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Rules) SetFake() {
	{
		{
			s.Groups.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RulesResponse) SetFake() {
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Warnings = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Warnings = append(s.Warnings, elem)
			}
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Scalar) SetFake() {
	{
		{
			s.Result.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Series) SetFake() {
	var unwrapped []LabelSet
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem LabelSet
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = Series(unwrapped)
}

// SetFake set fake values.
func (s *SeriesResponse) SetFake() {
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Warnings = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Warnings = append(s.Warnings, elem)
			}
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *String) SetFake() {
	{
		{
			s.Result = "string"
		}
	}
}

// SetFake set fake values.
func (s *Value) SetFake() {
	{
		{
			s.T = float64(0)
		}
	}
	{
		{
			s.V = "string"
		}
	}
}

// SetFake set fake values.
func (s *Vector) SetFake() {
	{
		{
			s.Result = nil
			for i := 0; i < 0; i++ {
				var elem VectorResultItem
				{
					elem.SetFake()
				}
				s.Result = append(s.Result, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *VectorResultItem) SetFake() {
	{
		{
			s.Metric.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *VectorResultItemMetric) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}
