// Code generated by ogen, DO NOT EDIT.

package promapi

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/v1/"
			if l := len("/api/v1/"); len(elem) >= l && elem[0:l] == "/api/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'l': // Prefix: "label"
				if l := len("label"); len(elem) >= l && elem[0:l] == "label" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "label"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/values"
						if l := len("/values"); len(elem) >= l && elem[0:l] == "/values" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetLabelValuesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetLabelsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handlePostLabelsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
				}
			case 'm': // Prefix: "metadata"
				if l := len("metadata"); len(elem) >= l && elem[0:l] == "metadata" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetMetadataRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'q': // Prefix: "query"
				if l := len("query"); len(elem) >= l && elem[0:l] == "query" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetQueryRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handlePostQueryRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '_': // Prefix: "_"
					if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "exemplars"
						if l := len("exemplars"); len(elem) >= l && elem[0:l] == "exemplars" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetQueryExemplarsRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handlePostQueryExemplarsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
					case 'r': // Prefix: "range"
						if l := len("range"); len(elem) >= l && elem[0:l] == "range" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetQueryRangeRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handlePostQueryRangeRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
					}
				}
			case 'r': // Prefix: "rules"
				if l := len("rules"); len(elem) >= l && elem[0:l] == "rules" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetRulesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 's': // Prefix: "series"
				if l := len("series"); len(elem) >= l && elem[0:l] == "series" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetSeriesRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handlePostSeriesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/v1/"
			if l := len("/api/v1/"); len(elem) >= l && elem[0:l] == "/api/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'l': // Prefix: "label"
				if l := len("label"); len(elem) >= l && elem[0:l] == "label" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "label"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/values"
						if l := len("/values"); len(elem) >= l && elem[0:l] == "/values" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: GetLabelValues
								r.name = "GetLabelValues"
								r.operationID = "getLabelValues"
								r.pathPattern = "/api/v1/label/{label}/values"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetLabels
							r.name = "GetLabels"
							r.operationID = "getLabels"
							r.pathPattern = "/api/v1/labels"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							// Leaf: PostLabels
							r.name = "PostLabels"
							r.operationID = "postLabels"
							r.pathPattern = "/api/v1/labels"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'm': // Prefix: "metadata"
				if l := len("metadata"); len(elem) >= l && elem[0:l] == "metadata" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: GetMetadata
						r.name = "GetMetadata"
						r.operationID = "getMetadata"
						r.pathPattern = "/api/v1/metadata"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'q': // Prefix: "query"
				if l := len("query"); len(elem) >= l && elem[0:l] == "query" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetQuery"
						r.operationID = "getQuery"
						r.pathPattern = "/api/v1/query"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "PostQuery"
						r.operationID = "postQuery"
						r.pathPattern = "/api/v1/query"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '_': // Prefix: "_"
					if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "exemplars"
						if l := len("exemplars"); len(elem) >= l && elem[0:l] == "exemplars" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: GetQueryExemplars
								r.name = "GetQueryExemplars"
								r.operationID = "getQueryExemplars"
								r.pathPattern = "/api/v1/query_exemplars"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								// Leaf: PostQueryExemplars
								r.name = "PostQueryExemplars"
								r.operationID = "postQueryExemplars"
								r.pathPattern = "/api/v1/query_exemplars"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'r': // Prefix: "range"
						if l := len("range"); len(elem) >= l && elem[0:l] == "range" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: GetQueryRange
								r.name = "GetQueryRange"
								r.operationID = "getQueryRange"
								r.pathPattern = "/api/v1/query_range"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								// Leaf: PostQueryRange
								r.name = "PostQueryRange"
								r.operationID = "postQueryRange"
								r.pathPattern = "/api/v1/query_range"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'r': // Prefix: "rules"
				if l := len("rules"); len(elem) >= l && elem[0:l] == "rules" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: GetRules
						r.name = "GetRules"
						r.operationID = "getRules"
						r.pathPattern = "/api/v1/rules"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 's': // Prefix: "series"
				if l := len("series"); len(elem) >= l && elem[0:l] == "series" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: GetSeries
						r.name = "GetSeries"
						r.operationID = "getSeries"
						r.pathPattern = "/api/v1/series"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						// Leaf: PostSeries
						r.name = "PostSeries"
						r.operationID = "postSeries"
						r.pathPattern = "/api/v1/series"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			}
		}
	}
	return r, false
}
