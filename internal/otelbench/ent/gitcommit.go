// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-faster/oteldb/internal/otelbench/ent/gitcommit"
	"github.com/go-faster/oteldb/internal/otelbench/ent/repository"
)

// GitCommit is the model entity for the GitCommit schema.
type GitCommit struct {
	config `json:"-"`
	// ID of the ent.
	// GitCommit SHA.
	ID string `json:"id,omitempty"`
	// GitCommit message.
	Message string `json:"message,omitempty"`
	// GitCommit author.
	AuthorLogin string `json:"author_login,omitempty"`
	// GitCommit author ID.
	AuthorID int64 `json:"author_id,omitempty"`
	// GitCommit date.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GitCommitQuery when eager-loading is set.
	Edges              GitCommitEdges `json:"edges"`
	repository_commits *int64
	selectValues       sql.SelectValues
}

// GitCommitEdges holds the relations/edges for other nodes in the graph.
type GitCommitEdges struct {
	// GitHub Repository.
	Repository *Repository `json:"repository,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GitCommitEdges) RepositoryOrErr() (*Repository, error) {
	if e.loadedTypes[0] {
		if e.Repository == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: repository.Label}
		}
		return e.Repository, nil
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GitCommit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gitcommit.FieldAuthorID:
			values[i] = new(sql.NullInt64)
		case gitcommit.FieldID, gitcommit.FieldMessage, gitcommit.FieldAuthorLogin:
			values[i] = new(sql.NullString)
		case gitcommit.FieldDate:
			values[i] = new(sql.NullTime)
		case gitcommit.ForeignKeys[0]: // repository_commits
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GitCommit fields.
func (gc *GitCommit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gitcommit.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gc.ID = value.String
			}
		case gitcommit.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				gc.Message = value.String
			}
		case gitcommit.FieldAuthorLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_login", values[i])
			} else if value.Valid {
				gc.AuthorLogin = value.String
			}
		case gitcommit.FieldAuthorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				gc.AuthorID = value.Int64
			}
		case gitcommit.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				gc.Date = value.Time
			}
		case gitcommit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_commits", value)
			} else if value.Valid {
				gc.repository_commits = new(int64)
				*gc.repository_commits = int64(value.Int64)
			}
		default:
			gc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GitCommit.
// This includes values selected through modifiers, order, etc.
func (gc *GitCommit) Value(name string) (ent.Value, error) {
	return gc.selectValues.Get(name)
}

// QueryRepository queries the "repository" edge of the GitCommit entity.
func (gc *GitCommit) QueryRepository() *RepositoryQuery {
	return NewGitCommitClient(gc.config).QueryRepository(gc)
}

// Update returns a builder for updating this GitCommit.
// Note that you need to call GitCommit.Unwrap() before calling this method if this GitCommit
// was returned from a transaction, and the transaction was committed or rolled back.
func (gc *GitCommit) Update() *GitCommitUpdateOne {
	return NewGitCommitClient(gc.config).UpdateOne(gc)
}

// Unwrap unwraps the GitCommit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gc *GitCommit) Unwrap() *GitCommit {
	_tx, ok := gc.config.driver.(*txDriver)
	if !ok {
		panic("ent: GitCommit is not a transactional entity")
	}
	gc.config.driver = _tx.drv
	return gc
}

// String implements the fmt.Stringer.
func (gc *GitCommit) String() string {
	var builder strings.Builder
	builder.WriteString("GitCommit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gc.ID))
	builder.WriteString("message=")
	builder.WriteString(gc.Message)
	builder.WriteString(", ")
	builder.WriteString("author_login=")
	builder.WriteString(gc.AuthorLogin)
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(fmt.Sprintf("%v", gc.AuthorID))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(gc.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GitCommits is a parsable slice of GitCommit.
type GitCommits []*GitCommit
