// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-faster/oteldb/internal/otelbench/ent/gitcommit"
	"github.com/go-faster/oteldb/internal/otelbench/ent/repository"
)

// GitCommitCreate is the builder for creating a GitCommit entity.
type GitCommitCreate struct {
	config
	mutation *GitCommitMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMessage sets the "message" field.
func (gcc *GitCommitCreate) SetMessage(s string) *GitCommitCreate {
	gcc.mutation.SetMessage(s)
	return gcc
}

// SetAuthorLogin sets the "author_login" field.
func (gcc *GitCommitCreate) SetAuthorLogin(s string) *GitCommitCreate {
	gcc.mutation.SetAuthorLogin(s)
	return gcc
}

// SetAuthorID sets the "author_id" field.
func (gcc *GitCommitCreate) SetAuthorID(i int64) *GitCommitCreate {
	gcc.mutation.SetAuthorID(i)
	return gcc
}

// SetDate sets the "date" field.
func (gcc *GitCommitCreate) SetDate(t time.Time) *GitCommitCreate {
	gcc.mutation.SetDate(t)
	return gcc
}

// SetID sets the "id" field.
func (gcc *GitCommitCreate) SetID(s string) *GitCommitCreate {
	gcc.mutation.SetID(s)
	return gcc
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (gcc *GitCommitCreate) SetRepositoryID(id int64) *GitCommitCreate {
	gcc.mutation.SetRepositoryID(id)
	return gcc
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (gcc *GitCommitCreate) SetNillableRepositoryID(id *int64) *GitCommitCreate {
	if id != nil {
		gcc = gcc.SetRepositoryID(*id)
	}
	return gcc
}

// SetRepository sets the "repository" edge to the Repository entity.
func (gcc *GitCommitCreate) SetRepository(r *Repository) *GitCommitCreate {
	return gcc.SetRepositoryID(r.ID)
}

// Mutation returns the GitCommitMutation object of the builder.
func (gcc *GitCommitCreate) Mutation() *GitCommitMutation {
	return gcc.mutation
}

// Save creates the GitCommit in the database.
func (gcc *GitCommitCreate) Save(ctx context.Context) (*GitCommit, error) {
	return withHooks(ctx, gcc.sqlSave, gcc.mutation, gcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gcc *GitCommitCreate) SaveX(ctx context.Context) *GitCommit {
	v, err := gcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcc *GitCommitCreate) Exec(ctx context.Context) error {
	_, err := gcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcc *GitCommitCreate) ExecX(ctx context.Context) {
	if err := gcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcc *GitCommitCreate) check() error {
	if _, ok := gcc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "GitCommit.message"`)}
	}
	if _, ok := gcc.mutation.AuthorLogin(); !ok {
		return &ValidationError{Name: "author_login", err: errors.New(`ent: missing required field "GitCommit.author_login"`)}
	}
	if _, ok := gcc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author_id", err: errors.New(`ent: missing required field "GitCommit.author_id"`)}
	}
	if _, ok := gcc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "GitCommit.date"`)}
	}
	return nil
}

func (gcc *GitCommitCreate) sqlSave(ctx context.Context) (*GitCommit, error) {
	if err := gcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GitCommit.ID type: %T", _spec.ID.Value)
		}
	}
	gcc.mutation.id = &_node.ID
	gcc.mutation.done = true
	return _node, nil
}

func (gcc *GitCommitCreate) createSpec() (*GitCommit, *sqlgraph.CreateSpec) {
	var (
		_node = &GitCommit{config: gcc.config}
		_spec = sqlgraph.NewCreateSpec(gitcommit.Table, sqlgraph.NewFieldSpec(gitcommit.FieldID, field.TypeString))
	)
	_spec.OnConflict = gcc.conflict
	if id, ok := gcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gcc.mutation.Message(); ok {
		_spec.SetField(gitcommit.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := gcc.mutation.AuthorLogin(); ok {
		_spec.SetField(gitcommit.FieldAuthorLogin, field.TypeString, value)
		_node.AuthorLogin = value
	}
	if value, ok := gcc.mutation.AuthorID(); ok {
		_spec.SetField(gitcommit.FieldAuthorID, field.TypeInt64, value)
		_node.AuthorID = value
	}
	if value, ok := gcc.mutation.Date(); ok {
		_spec.SetField(gitcommit.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if nodes := gcc.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gitcommit.RepositoryTable,
			Columns: []string{gitcommit.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_commits = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GitCommit.Create().
//		SetMessage(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GitCommitUpsert) {
//			SetMessage(v+v).
//		}).
//		Exec(ctx)
func (gcc *GitCommitCreate) OnConflict(opts ...sql.ConflictOption) *GitCommitUpsertOne {
	gcc.conflict = opts
	return &GitCommitUpsertOne{
		create: gcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GitCommit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcc *GitCommitCreate) OnConflictColumns(columns ...string) *GitCommitUpsertOne {
	gcc.conflict = append(gcc.conflict, sql.ConflictColumns(columns...))
	return &GitCommitUpsertOne{
		create: gcc,
	}
}

type (
	// GitCommitUpsertOne is the builder for "upsert"-ing
	//  one GitCommit node.
	GitCommitUpsertOne struct {
		create *GitCommitCreate
	}

	// GitCommitUpsert is the "OnConflict" setter.
	GitCommitUpsert struct {
		*sql.UpdateSet
	}
)

// SetMessage sets the "message" field.
func (u *GitCommitUpsert) SetMessage(v string) *GitCommitUpsert {
	u.Set(gitcommit.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *GitCommitUpsert) UpdateMessage() *GitCommitUpsert {
	u.SetExcluded(gitcommit.FieldMessage)
	return u
}

// SetAuthorLogin sets the "author_login" field.
func (u *GitCommitUpsert) SetAuthorLogin(v string) *GitCommitUpsert {
	u.Set(gitcommit.FieldAuthorLogin, v)
	return u
}

// UpdateAuthorLogin sets the "author_login" field to the value that was provided on create.
func (u *GitCommitUpsert) UpdateAuthorLogin() *GitCommitUpsert {
	u.SetExcluded(gitcommit.FieldAuthorLogin)
	return u
}

// SetAuthorID sets the "author_id" field.
func (u *GitCommitUpsert) SetAuthorID(v int64) *GitCommitUpsert {
	u.Set(gitcommit.FieldAuthorID, v)
	return u
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *GitCommitUpsert) UpdateAuthorID() *GitCommitUpsert {
	u.SetExcluded(gitcommit.FieldAuthorID)
	return u
}

// AddAuthorID adds v to the "author_id" field.
func (u *GitCommitUpsert) AddAuthorID(v int64) *GitCommitUpsert {
	u.Add(gitcommit.FieldAuthorID, v)
	return u
}

// SetDate sets the "date" field.
func (u *GitCommitUpsert) SetDate(v time.Time) *GitCommitUpsert {
	u.Set(gitcommit.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *GitCommitUpsert) UpdateDate() *GitCommitUpsert {
	u.SetExcluded(gitcommit.FieldDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GitCommit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gitcommit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GitCommitUpsertOne) UpdateNewValues() *GitCommitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(gitcommit.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GitCommit.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GitCommitUpsertOne) Ignore() *GitCommitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GitCommitUpsertOne) DoNothing() *GitCommitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GitCommitCreate.OnConflict
// documentation for more info.
func (u *GitCommitUpsertOne) Update(set func(*GitCommitUpsert)) *GitCommitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GitCommitUpsert{UpdateSet: update})
	}))
	return u
}

// SetMessage sets the "message" field.
func (u *GitCommitUpsertOne) SetMessage(v string) *GitCommitUpsertOne {
	return u.Update(func(s *GitCommitUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *GitCommitUpsertOne) UpdateMessage() *GitCommitUpsertOne {
	return u.Update(func(s *GitCommitUpsert) {
		s.UpdateMessage()
	})
}

// SetAuthorLogin sets the "author_login" field.
func (u *GitCommitUpsertOne) SetAuthorLogin(v string) *GitCommitUpsertOne {
	return u.Update(func(s *GitCommitUpsert) {
		s.SetAuthorLogin(v)
	})
}

// UpdateAuthorLogin sets the "author_login" field to the value that was provided on create.
func (u *GitCommitUpsertOne) UpdateAuthorLogin() *GitCommitUpsertOne {
	return u.Update(func(s *GitCommitUpsert) {
		s.UpdateAuthorLogin()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *GitCommitUpsertOne) SetAuthorID(v int64) *GitCommitUpsertOne {
	return u.Update(func(s *GitCommitUpsert) {
		s.SetAuthorID(v)
	})
}

// AddAuthorID adds v to the "author_id" field.
func (u *GitCommitUpsertOne) AddAuthorID(v int64) *GitCommitUpsertOne {
	return u.Update(func(s *GitCommitUpsert) {
		s.AddAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *GitCommitUpsertOne) UpdateAuthorID() *GitCommitUpsertOne {
	return u.Update(func(s *GitCommitUpsert) {
		s.UpdateAuthorID()
	})
}

// SetDate sets the "date" field.
func (u *GitCommitUpsertOne) SetDate(v time.Time) *GitCommitUpsertOne {
	return u.Update(func(s *GitCommitUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *GitCommitUpsertOne) UpdateDate() *GitCommitUpsertOne {
	return u.Update(func(s *GitCommitUpsert) {
		s.UpdateDate()
	})
}

// Exec executes the query.
func (u *GitCommitUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GitCommitCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GitCommitUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GitCommitUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GitCommitUpsertOne.ID is not supported by MySQL driver. Use GitCommitUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GitCommitUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GitCommitCreateBulk is the builder for creating many GitCommit entities in bulk.
type GitCommitCreateBulk struct {
	config
	err      error
	builders []*GitCommitCreate
	conflict []sql.ConflictOption
}

// Save creates the GitCommit entities in the database.
func (gccb *GitCommitCreateBulk) Save(ctx context.Context) ([]*GitCommit, error) {
	if gccb.err != nil {
		return nil, gccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gccb.builders))
	nodes := make([]*GitCommit, len(gccb.builders))
	mutators := make([]Mutator, len(gccb.builders))
	for i := range gccb.builders {
		func(i int, root context.Context) {
			builder := gccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GitCommitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gccb *GitCommitCreateBulk) SaveX(ctx context.Context) []*GitCommit {
	v, err := gccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gccb *GitCommitCreateBulk) Exec(ctx context.Context) error {
	_, err := gccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gccb *GitCommitCreateBulk) ExecX(ctx context.Context) {
	if err := gccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GitCommit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GitCommitUpsert) {
//			SetMessage(v+v).
//		}).
//		Exec(ctx)
func (gccb *GitCommitCreateBulk) OnConflict(opts ...sql.ConflictOption) *GitCommitUpsertBulk {
	gccb.conflict = opts
	return &GitCommitUpsertBulk{
		create: gccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GitCommit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gccb *GitCommitCreateBulk) OnConflictColumns(columns ...string) *GitCommitUpsertBulk {
	gccb.conflict = append(gccb.conflict, sql.ConflictColumns(columns...))
	return &GitCommitUpsertBulk{
		create: gccb,
	}
}

// GitCommitUpsertBulk is the builder for "upsert"-ing
// a bulk of GitCommit nodes.
type GitCommitUpsertBulk struct {
	create *GitCommitCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GitCommit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gitcommit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GitCommitUpsertBulk) UpdateNewValues() *GitCommitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(gitcommit.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GitCommit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GitCommitUpsertBulk) Ignore() *GitCommitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GitCommitUpsertBulk) DoNothing() *GitCommitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GitCommitCreateBulk.OnConflict
// documentation for more info.
func (u *GitCommitUpsertBulk) Update(set func(*GitCommitUpsert)) *GitCommitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GitCommitUpsert{UpdateSet: update})
	}))
	return u
}

// SetMessage sets the "message" field.
func (u *GitCommitUpsertBulk) SetMessage(v string) *GitCommitUpsertBulk {
	return u.Update(func(s *GitCommitUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *GitCommitUpsertBulk) UpdateMessage() *GitCommitUpsertBulk {
	return u.Update(func(s *GitCommitUpsert) {
		s.UpdateMessage()
	})
}

// SetAuthorLogin sets the "author_login" field.
func (u *GitCommitUpsertBulk) SetAuthorLogin(v string) *GitCommitUpsertBulk {
	return u.Update(func(s *GitCommitUpsert) {
		s.SetAuthorLogin(v)
	})
}

// UpdateAuthorLogin sets the "author_login" field to the value that was provided on create.
func (u *GitCommitUpsertBulk) UpdateAuthorLogin() *GitCommitUpsertBulk {
	return u.Update(func(s *GitCommitUpsert) {
		s.UpdateAuthorLogin()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *GitCommitUpsertBulk) SetAuthorID(v int64) *GitCommitUpsertBulk {
	return u.Update(func(s *GitCommitUpsert) {
		s.SetAuthorID(v)
	})
}

// AddAuthorID adds v to the "author_id" field.
func (u *GitCommitUpsertBulk) AddAuthorID(v int64) *GitCommitUpsertBulk {
	return u.Update(func(s *GitCommitUpsert) {
		s.AddAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *GitCommitUpsertBulk) UpdateAuthorID() *GitCommitUpsertBulk {
	return u.Update(func(s *GitCommitUpsert) {
		s.UpdateAuthorID()
	})
}

// SetDate sets the "date" field.
func (u *GitCommitUpsertBulk) SetDate(v time.Time) *GitCommitUpsertBulk {
	return u.Update(func(s *GitCommitUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *GitCommitUpsertBulk) UpdateDate() *GitCommitUpsertBulk {
	return u.Update(func(s *GitCommitUpsert) {
		s.UpdateDate()
	})
}

// Exec executes the query.
func (u *GitCommitUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GitCommitCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GitCommitCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GitCommitUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
