// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// GitCommitsColumns holds the columns for the "git_commits" table.
	GitCommitsColumns = []*schema.Column{
		{Name: "sha", Type: field.TypeString, Unique: true},
		{Name: "message", Type: field.TypeString},
		{Name: "author_login", Type: field.TypeString},
		{Name: "author_id", Type: field.TypeInt64},
		{Name: "date", Type: field.TypeTime},
		{Name: "repository_commits", Type: field.TypeInt64, Nullable: true},
	}
	// GitCommitsTable holds the schema information for the "git_commits" table.
	GitCommitsTable = &schema.Table{
		Name:       "git_commits",
		Columns:    GitCommitsColumns,
		PrimaryKey: []*schema.Column{GitCommitsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "git_commits_repositories_commits",
				Columns:    []*schema.Column{GitCommitsColumns[5]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "html_url", Type: field.TypeString, Nullable: true},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
	}
	// RepositoriesColumns holds the columns for the "repositories" table.
	RepositoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "full_name", Type: field.TypeString, Unique: true},
		{Name: "html_url", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Default: ""},
		{Name: "last_pushed_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_event_at", Type: field.TypeTime, Nullable: true},
		{Name: "organization_repositories", Type: field.TypeInt64, Nullable: true},
	}
	// RepositoriesTable holds the schema information for the "repositories" table.
	RepositoriesTable = &schema.Table{
		Name:       "repositories",
		Columns:    RepositoriesColumns,
		PrimaryKey: []*schema.Column{RepositoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "repositories_organizations_repositories",
				Columns:    []*schema.Column{RepositoriesColumns[7]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		GitCommitsTable,
		OrganizationsTable,
		RepositoriesTable,
	}
)

func init() {
	GitCommitsTable.ForeignKeys[0].RefTable = RepositoriesTable
	RepositoriesTable.ForeignKeys[0].RefTable = OrganizationsTable
}
