// Code generated by ent, DO NOT EDIT.

package gitcommit

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the gitcommit type in the database.
	Label = "git_commit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "sha"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldAuthorLogin holds the string denoting the author_login field in the database.
	FieldAuthorLogin = "author_login"
	// FieldAuthorID holds the string denoting the author_id field in the database.
	FieldAuthorID = "author_id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// EdgeRepository holds the string denoting the repository edge name in mutations.
	EdgeRepository = "repository"
	// RepositoryFieldID holds the string denoting the ID field of the Repository.
	RepositoryFieldID = "id"
	// Table holds the table name of the gitcommit in the database.
	Table = "git_commits"
	// RepositoryTable is the table that holds the repository relation/edge.
	RepositoryTable = "git_commits"
	// RepositoryInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoryInverseTable = "repositories"
	// RepositoryColumn is the table column denoting the repository relation/edge.
	RepositoryColumn = "repository_commits"
)

// Columns holds all SQL columns for gitcommit fields.
var Columns = []string{
	FieldID,
	FieldMessage,
	FieldAuthorLogin,
	FieldAuthorID,
	FieldDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "git_commits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repository_commits",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the GitCommit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByAuthorLogin orders the results by the author_login field.
func ByAuthorLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorLogin, opts...).ToFunc()
}

// ByAuthorID orders the results by the author_id field.
func ByAuthorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorID, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByRepositoryField orders the results by repository field.
func ByRepositoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoryStep(), sql.OrderByField(field, opts...))
	}
}
func newRepositoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoryInverseTable, RepositoryFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RepositoryTable, RepositoryColumn),
	)
}
