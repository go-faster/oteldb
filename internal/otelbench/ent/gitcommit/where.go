// Code generated by ent, DO NOT EDIT.

package gitcommit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/go-faster/oteldb/internal/otelbench/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContainsFold(FieldID, id))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldMessage, v))
}

// AuthorLogin applies equality check predicate on the "author_login" field. It's identical to AuthorLoginEQ.
func AuthorLogin(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldAuthorLogin, v))
}

// AuthorID applies equality check predicate on the "author_id" field. It's identical to AuthorIDEQ.
func AuthorID(v int64) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldAuthorID, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldDate, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContainsFold(FieldMessage, v))
}

// AuthorLoginEQ applies the EQ predicate on the "author_login" field.
func AuthorLoginEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldAuthorLogin, v))
}

// AuthorLoginNEQ applies the NEQ predicate on the "author_login" field.
func AuthorLoginNEQ(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldAuthorLogin, v))
}

// AuthorLoginIn applies the In predicate on the "author_login" field.
func AuthorLoginIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldAuthorLogin, vs...))
}

// AuthorLoginNotIn applies the NotIn predicate on the "author_login" field.
func AuthorLoginNotIn(vs ...string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldAuthorLogin, vs...))
}

// AuthorLoginGT applies the GT predicate on the "author_login" field.
func AuthorLoginGT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldAuthorLogin, v))
}

// AuthorLoginGTE applies the GTE predicate on the "author_login" field.
func AuthorLoginGTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldAuthorLogin, v))
}

// AuthorLoginLT applies the LT predicate on the "author_login" field.
func AuthorLoginLT(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldAuthorLogin, v))
}

// AuthorLoginLTE applies the LTE predicate on the "author_login" field.
func AuthorLoginLTE(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldAuthorLogin, v))
}

// AuthorLoginContains applies the Contains predicate on the "author_login" field.
func AuthorLoginContains(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContains(FieldAuthorLogin, v))
}

// AuthorLoginHasPrefix applies the HasPrefix predicate on the "author_login" field.
func AuthorLoginHasPrefix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasPrefix(FieldAuthorLogin, v))
}

// AuthorLoginHasSuffix applies the HasSuffix predicate on the "author_login" field.
func AuthorLoginHasSuffix(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldHasSuffix(FieldAuthorLogin, v))
}

// AuthorLoginEqualFold applies the EqualFold predicate on the "author_login" field.
func AuthorLoginEqualFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEqualFold(FieldAuthorLogin, v))
}

// AuthorLoginContainsFold applies the ContainsFold predicate on the "author_login" field.
func AuthorLoginContainsFold(v string) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldContainsFold(FieldAuthorLogin, v))
}

// AuthorIDEQ applies the EQ predicate on the "author_id" field.
func AuthorIDEQ(v int64) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldAuthorID, v))
}

// AuthorIDNEQ applies the NEQ predicate on the "author_id" field.
func AuthorIDNEQ(v int64) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldAuthorID, v))
}

// AuthorIDIn applies the In predicate on the "author_id" field.
func AuthorIDIn(vs ...int64) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldAuthorID, vs...))
}

// AuthorIDNotIn applies the NotIn predicate on the "author_id" field.
func AuthorIDNotIn(vs ...int64) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldAuthorID, vs...))
}

// AuthorIDGT applies the GT predicate on the "author_id" field.
func AuthorIDGT(v int64) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldAuthorID, v))
}

// AuthorIDGTE applies the GTE predicate on the "author_id" field.
func AuthorIDGTE(v int64) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldAuthorID, v))
}

// AuthorIDLT applies the LT predicate on the "author_id" field.
func AuthorIDLT(v int64) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldAuthorID, v))
}

// AuthorIDLTE applies the LTE predicate on the "author_id" field.
func AuthorIDLTE(v int64) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldAuthorID, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.GitCommit {
	return predicate.GitCommit(sql.FieldLTE(FieldDate, v))
}

// HasRepository applies the HasEdge predicate on the "repository" edge.
func HasRepository() predicate.GitCommit {
	return predicate.GitCommit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RepositoryTable, RepositoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepositoryWith applies the HasEdge predicate on the "repository" edge with a given conditions (other predicates).
func HasRepositoryWith(preds ...predicate.Repository) predicate.GitCommit {
	return predicate.GitCommit(func(s *sql.Selector) {
		step := newRepositoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GitCommit) predicate.GitCommit {
	return predicate.GitCommit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GitCommit) predicate.GitCommit {
	return predicate.GitCommit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GitCommit) predicate.GitCommit {
	return predicate.GitCommit(sql.NotPredicates(p))
}
