// Code generated by ogen, DO NOT EDIT.

package lokiapi

import (
	"fmt"
	"io"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Direction
type Direction string

const (
	DirectionBackward Direction = "backward"
	DirectionForward  Direction = "forward"
)

// MarshalText implements encoding.TextMarshaler.
func (s Direction) MarshalText() ([]byte, error) {
	switch s {
	case DirectionBackward:
		return []byte(s), nil
	case DirectionForward:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Direction) UnmarshalText(data []byte) error {
	switch Direction(data) {
	case DirectionBackward:
		*s = DirectionBackward
		return nil
	case DirectionForward:
		*s = DirectionForward
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Entry []Value

type Error string

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/LabelSet
type LabelSet map[string]string

func (s *LabelSet) init() LabelSet {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Array of label names.
// Ref: #/components/schemas/Labels
type Labels struct {
	Data   []string `json:"data"`
	Status string   `json:"status"`
}

// GetData returns the value of Data.
func (s *Labels) GetData() []string {
	return s.Data
}

// GetStatus returns the value of Status.
func (s *Labels) GetStatus() string {
	return s.Status
}

// SetData sets the value of Data.
func (s *Labels) SetData(val []string) {
	s.Data = val
}

// SetStatus sets the value of Status.
func (s *Labels) SetStatus(val string) {
	s.Status = val
}

type LokiTime string

// Array of maps.
// Ref: #/components/schemas/Maps
type Maps struct {
	Data   []MapsDataItem `json:"data"`
	Status string         `json:"status"`
}

// GetData returns the value of Data.
func (s *Maps) GetData() []MapsDataItem {
	return s.Data
}

// GetStatus returns the value of Status.
func (s *Maps) GetStatus() string {
	return s.Status
}

// SetData sets the value of Data.
func (s *Maps) SetData(val []MapsDataItem) {
	s.Data = val
}

// SetStatus sets the value of Status.
func (s *Maps) SetStatus(val string) {
	s.Status = val
}

type MapsDataItem map[string]string

func (s *MapsDataItem) init() MapsDataItem {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// NewOptDirection returns new OptDirection with value set to v.
func NewOptDirection(v Direction) OptDirection {
	return OptDirection{
		Value: v,
		Set:   true,
	}
}

// OptDirection is optional Direction.
type OptDirection struct {
	Value Direction
	Set   bool
}

// IsSet returns true if OptDirection was set.
func (o OptDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDirection) Reset() {
	var v Direction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDirection) SetTo(v Direction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDirection) Get() (v Direction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDirection) Or(d Direction) Direction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLabelSet returns new OptLabelSet with value set to v.
func NewOptLabelSet(v LabelSet) OptLabelSet {
	return OptLabelSet{
		Value: v,
		Set:   true,
	}
}

// OptLabelSet is optional LabelSet.
type OptLabelSet struct {
	Value LabelSet
	Set   bool
}

// IsSet returns true if OptLabelSet was set.
func (o OptLabelSet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLabelSet) Reset() {
	var v LabelSet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLabelSet) SetTo(v LabelSet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLabelSet) Get() (v LabelSet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLabelSet) Or(d LabelSet) LabelSet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLokiTime returns new OptLokiTime with value set to v.
func NewOptLokiTime(v LokiTime) OptLokiTime {
	return OptLokiTime{
		Value: v,
		Set:   true,
	}
}

// OptLokiTime is optional LokiTime.
type OptLokiTime struct {
	Value LokiTime
	Set   bool
}

// IsSet returns true if OptLokiTime was set.
func (o OptLokiTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLokiTime) Reset() {
	var v LokiTime
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLokiTime) SetTo(v LokiTime) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLokiTime) Get() (v LokiTime, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLokiTime) Or(d LokiTime) LokiTime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPrometheusDuration returns new OptPrometheusDuration with value set to v.
func NewOptPrometheusDuration(v PrometheusDuration) OptPrometheusDuration {
	return OptPrometheusDuration{
		Value: v,
		Set:   true,
	}
}

// OptPrometheusDuration is optional PrometheusDuration.
type OptPrometheusDuration struct {
	Value PrometheusDuration
	Set   bool
}

// IsSet returns true if OptPrometheusDuration was set.
func (o OptPrometheusDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPrometheusDuration) Reset() {
	var v PrometheusDuration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPrometheusDuration) SetTo(v PrometheusDuration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPrometheusDuration) Get() (v PrometheusDuration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPrometheusDuration) Or(d PrometheusDuration) PrometheusDuration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PrometheusDuration string

// Ref: #/components/schemas/Push
type Push struct {
	Streams []Stream `json:"streams"`
}

// GetStreams returns the value of Streams.
func (s *Push) GetStreams() []Stream {
	return s.Streams
}

// SetStreams sets the value of Streams.
func (s *Push) SetStreams(val []Stream) {
	s.Streams = val
}

func (*Push) pushReq() {}

// PushNoContent is response for Push operation.
type PushNoContent struct{}

type PushReqApplicationXProtobuf struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PushReqApplicationXProtobuf) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*PushReqApplicationXProtobuf) pushReq() {}

// Ref: #/components/schemas/QueryResponse
type QueryResponse struct {
	Status string            `json:"status"`
	Data   QueryResponseData `json:"data"`
}

// GetStatus returns the value of Status.
func (s *QueryResponse) GetStatus() string {
	return s.Status
}

// GetData returns the value of Data.
func (s *QueryResponse) GetData() QueryResponseData {
	return s.Data
}

// SetStatus sets the value of Status.
func (s *QueryResponse) SetStatus(val string) {
	s.Status = val
}

// SetData sets the value of Data.
func (s *QueryResponse) SetData(val QueryResponseData) {
	s.Data = val
}

// Ref: #/components/schemas/QueryResponseData
type QueryResponseData struct {
	ResultType QueryResponseDataResultType `json:"resultType"`
	Result     Streams                     `json:"result"`
	Stats      Stats                       `json:"stats"`
}

// GetResultType returns the value of ResultType.
func (s *QueryResponseData) GetResultType() QueryResponseDataResultType {
	return s.ResultType
}

// GetResult returns the value of Result.
func (s *QueryResponseData) GetResult() Streams {
	return s.Result
}

// GetStats returns the value of Stats.
func (s *QueryResponseData) GetStats() Stats {
	return s.Stats
}

// SetResultType sets the value of ResultType.
func (s *QueryResponseData) SetResultType(val QueryResponseDataResultType) {
	s.ResultType = val
}

// SetResult sets the value of Result.
func (s *QueryResponseData) SetResult(val Streams) {
	s.Result = val
}

// SetStats sets the value of Stats.
func (s *QueryResponseData) SetStats(val Stats) {
	s.Stats = val
}

type QueryResponseDataResultType string

const (
	QueryResponseDataResultTypeStreams QueryResponseDataResultType = "streams"
	QueryResponseDataResultTypeMatrix  QueryResponseDataResultType = "matrix"
)

// MarshalText implements encoding.TextMarshaler.
func (s QueryResponseDataResultType) MarshalText() ([]byte, error) {
	switch s {
	case QueryResponseDataResultTypeStreams:
		return []byte(s), nil
	case QueryResponseDataResultTypeMatrix:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *QueryResponseDataResultType) UnmarshalText(data []byte) error {
	switch QueryResponseDataResultType(data) {
	case QueryResponseDataResultTypeStreams:
		*s = QueryResponseDataResultTypeStreams
		return nil
	case QueryResponseDataResultTypeMatrix:
		*s = QueryResponseDataResultTypeMatrix
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Stats
type Stats struct{}

// Ref: #/components/schemas/Stream
type Stream struct {
	Stream OptLabelSet `json:"stream"`
	Metric OptLabelSet `json:"metric"`
	Values []Entry     `json:"values"`
}

// GetStream returns the value of Stream.
func (s *Stream) GetStream() OptLabelSet {
	return s.Stream
}

// GetMetric returns the value of Metric.
func (s *Stream) GetMetric() OptLabelSet {
	return s.Metric
}

// GetValues returns the value of Values.
func (s *Stream) GetValues() []Entry {
	return s.Values
}

// SetStream sets the value of Stream.
func (s *Stream) SetStream(val OptLabelSet) {
	s.Stream = val
}

// SetMetric sets the value of Metric.
func (s *Stream) SetMetric(val OptLabelSet) {
	s.Metric = val
}

// SetValues sets the value of Values.
func (s *Stream) SetValues(val []Entry) {
	s.Values = val
}

type Streams []Stream

// Ref: #/components/schemas/Value
// Value represents sum type.
type Value struct {
	Type    ValueType // switch on this field
	String  string
	Float64 float64
}

// ValueType is oneOf type of Value.
type ValueType string

// Possible values for ValueType.
const (
	StringValue  ValueType = "string"
	Float64Value ValueType = "float64"
)

// IsString reports whether Value is string.
func (s Value) IsString() bool { return s.Type == StringValue }

// IsFloat64 reports whether Value is float64.
func (s Value) IsFloat64() bool { return s.Type == Float64Value }

// SetString sets Value to string.
func (s *Value) SetString(v string) {
	s.Type = StringValue
	s.String = v
}

// GetString returns string and true boolean if Value is string.
func (s Value) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringValue returns new Value from string.
func NewStringValue(v string) Value {
	var s Value
	s.SetString(v)
	return s
}

// SetFloat64 sets Value to float64.
func (s *Value) SetFloat64(v float64) {
	s.Type = Float64Value
	s.Float64 = v
}

// GetFloat64 returns float64 and true boolean if Value is float64.
func (s Value) GetFloat64() (v float64, ok bool) {
	if !s.IsFloat64() {
		return v, false
	}
	return s.Float64, true
}

// NewFloat64Value returns new Value from float64.
func NewFloat64Value(v float64) Value {
	var s Value
	s.SetFloat64(v)
	return s
}

// Array of strings.
// Ref: #/components/schemas/Values
type Values struct {
	Data   []string `json:"data"`
	Status string   `json:"status"`
}

// GetData returns the value of Data.
func (s *Values) GetData() []string {
	return s.Data
}

// GetStatus returns the value of Status.
func (s *Values) GetStatus() string {
	return s.Status
}

// SetData sets the value of Data.
func (s *Values) SetData(val []string) {
	s.Data = val
}

// SetStatus sets the value of Status.
func (s *Values) SetStatus(val string) {
	s.Status = val
}
