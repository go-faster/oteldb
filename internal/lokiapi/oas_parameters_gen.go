// Code generated by ogen, DO NOT EDIT.

package lokiapi

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// IndexStatsParams is parameters of indexStats operation.
type IndexStatsParams struct {
	Start OptLokiTime
	End   OptLokiTime
	// The LogQL matchers to check.
	Query string
}

func unpackIndexStatsParams(packed middleware.Parameters) (params IndexStatsParams) {
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		params.Query = packed[key].(string)
	}
	return params
}

func decodeIndexStatsParams(args [0]string, argsEscaped bool, r *http.Request) (params IndexStatsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal LokiTime
				if err := func() error {
					var paramsDotStartValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStartValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStartVal = LokiTime(paramsDotStartValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal LokiTime
				if err := func() error {
					var paramsDotEndValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotEndValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotEndVal = LokiTime(paramsDotEndValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Query = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// LabelValuesParams is parameters of labelValues operation.
type LabelValuesParams struct {
	// The start time for the query as a nanosecond Unix epoch.
	// Defaults to 6 hours ago.
	Start OptLokiTime
	// The end time for the query as a nanosecond Unix epoch.
	// Defaults to now.
	End OptLokiTime
	// A `duration` used to calculate `start` relative to `end`.
	// If `end` is in the future, `start` is calculated as this duration before now.
	// Any value specified for start supersedes this parameter.
	Since OptPrometheusDuration
	// A set of log stream selector that selects the streams to match and return label values for
	// `{name}`.
	Query OptString
	// Label name.
	Name string
}

func unpackLabelValuesParams(packed middleware.Parameters) (params LabelValuesParams) {
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "since",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Since = v.(OptPrometheusDuration)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Query = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeLabelValuesParams(args [1]string, argsEscaped bool, r *http.Request) (params LabelValuesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal LokiTime
				if err := func() error {
					var paramsDotStartValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStartValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStartVal = LokiTime(paramsDotStartValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal LokiTime
				if err := func() error {
					var paramsDotEndValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotEndValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotEndVal = LokiTime(paramsDotEndValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: since.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal PrometheusDuration
				if err := func() error {
					var paramsDotSinceValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotSinceValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotSinceVal = PrometheusDuration(paramsDotSinceValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Since.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "since",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQueryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQueryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Query.SetTo(paramsDotQueryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LabelsParams is parameters of labels operation.
type LabelsParams struct {
	// The start time for the query as a nanosecond Unix epoch.
	// Defaults to 6 hours ago.
	Start OptLokiTime
	// The end time for the query as a nanosecond Unix epoch.
	// Defaults to now.
	End OptLokiTime
	// A `duration` used to calculate `start` relative to `end`.
	// If `end` is in the future, `start` is calculated as this duration before now.
	// Any value specified for start supersedes this parameter.
	Since OptPrometheusDuration
}

func unpackLabelsParams(packed middleware.Parameters) (params LabelsParams) {
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "since",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Since = v.(OptPrometheusDuration)
		}
	}
	return params
}

func decodeLabelsParams(args [0]string, argsEscaped bool, r *http.Request) (params LabelsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal LokiTime
				if err := func() error {
					var paramsDotStartValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStartValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStartVal = LokiTime(paramsDotStartValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal LokiTime
				if err := func() error {
					var paramsDotEndValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotEndValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotEndVal = LokiTime(paramsDotEndValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: since.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal PrometheusDuration
				if err := func() error {
					var paramsDotSinceValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotSinceValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotSinceVal = PrometheusDuration(paramsDotSinceValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Since.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "since",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// QueryParams is parameters of query operation.
type QueryParams struct {
	// The LogQL query to perform.
	Query string
	// The max number of entries to return.
	// It defaults to `100`.
	// Only applies to query types which produce a stream (log lines) response.
	Limit OptInt
	// The evaluation time for the query as a nanosecond Unix epoch or another supported format.
	// Defaults to now.
	Time OptLokiTime
	// Determines the sort order of logs.
	// Supported values are `forward` or `backward`.
	// Defaults to `backward`.
	Direction OptDirection
}

func unpackQueryParams(packed middleware.Parameters) (params QueryParams) {
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		params.Query = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "time",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Time = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "direction",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Direction = v.(OptDirection)
		}
	}
	return params
}

func decodeQueryParams(args [0]string, argsEscaped bool, r *http.Request) (params QueryParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Query = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: time.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "time",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeVal LokiTime
				if err := func() error {
					var paramsDotTimeValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotTimeValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotTimeVal = LokiTime(paramsDotTimeValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Time.SetTo(paramsDotTimeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "time",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: direction.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal Direction
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = Direction(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Direction.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "direction",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// QueryRangeParams is parameters of queryRange operation.
type QueryRangeParams struct {
	Start OptLokiTime
	End   OptLokiTime
	// A `duration` used to calculate `start` relative to `end`.
	// If `end` is in the future, `start` is calculated as this duration before now.
	// Any value specified for start supersedes this parameter.
	Since OptPrometheusDuration
	// The LogQL query to perform.
	Query string
	// Query resolution step width in `duration` format or float number of seconds.
	// `duration` refers to Prometheus duration strings of the form `[0-9]+[smhdwy]`.
	// For example, `5m` refers to a duration of 5 minutes.
	// Defaults to a dynamic value based on start and end.
	// Only applies to query types which produce a matrix response.
	Step OptPrometheusDuration
	// The max number of entries to return.
	// It defaults to `100`.
	// Only applies to query types which produce a stream (log lines) response.
	Limit OptInt
	// Determines the sort order of logs.
	// Supported values are `forward` or `backward`.
	// Defaults to `backward`.
	Direction OptDirection
}

func unpackQueryRangeParams(packed middleware.Parameters) (params QueryRangeParams) {
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "since",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Since = v.(OptPrometheusDuration)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		params.Query = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "step",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Step = v.(OptPrometheusDuration)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "direction",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Direction = v.(OptDirection)
		}
	}
	return params
}

func decodeQueryRangeParams(args [0]string, argsEscaped bool, r *http.Request) (params QueryRangeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal LokiTime
				if err := func() error {
					var paramsDotStartValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStartValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStartVal = LokiTime(paramsDotStartValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal LokiTime
				if err := func() error {
					var paramsDotEndValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotEndValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotEndVal = LokiTime(paramsDotEndValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: since.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal PrometheusDuration
				if err := func() error {
					var paramsDotSinceValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotSinceValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotSinceVal = PrometheusDuration(paramsDotSinceValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Since.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "since",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Query = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: step.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "step",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStepVal PrometheusDuration
				if err := func() error {
					var paramsDotStepValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStepValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStepVal = PrometheusDuration(paramsDotStepValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Step.SetTo(paramsDotStepVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Step.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "step",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: direction.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal Direction
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = Direction(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Direction.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "direction",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SeriesParams is parameters of series operation.
type SeriesParams struct {
	Start OptLokiTime
	End   OptLokiTime
	// A `duration` used to calculate `start` relative to `end`.
	// If `end` is in the future, `start` is calculated as this duration before now.
	// Any value specified for start supersedes this parameter.
	Since OptPrometheusDuration
	Match []string
}

func unpackSeriesParams(packed middleware.Parameters) (params SeriesParams) {
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptLokiTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "since",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Since = v.(OptPrometheusDuration)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "match[]",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Match = v.([]string)
		}
	}
	return params
}

func decodeSeriesParams(args [0]string, argsEscaped bool, r *http.Request) (params SeriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal LokiTime
				if err := func() error {
					var paramsDotStartValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStartValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStartVal = LokiTime(paramsDotStartValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal LokiTime
				if err := func() error {
					var paramsDotEndValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotEndValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotEndVal = LokiTime(paramsDotEndValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: since.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal PrometheusDuration
				if err := func() error {
					var paramsDotSinceValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotSinceValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotSinceVal = PrometheusDuration(paramsDotSinceValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Since.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "since",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: match[].
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "match[]",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotMatchVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotMatchVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Match = append(params.Match, paramsDotMatchVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "match[]",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
