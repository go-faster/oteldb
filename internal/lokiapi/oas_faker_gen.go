// Code generated by ogen, DO NOT EDIT.

package lokiapi

import (
	"fmt"
)

// SetFake set fake values.
func (s *Entry) SetFake() {
	var unwrapped []Value
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Value
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = Entry(unwrapped)
}

// SetFake set fake values.
func (s *Error) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = Error(unwrapped)
}

// SetFake set fake values.
func (s *Maps) SetFake() {
	{
		{
			s.Data = nil
			for i := 0; i < 0; i++ {
				var elem MapsDataItem
				{
					elem.SetFake()
				}
				s.Data = append(s.Data, elem)
			}
		}
	}
	{
		{
			s.Status = "string"
		}
	}
}

// SetFake set fake values.
func (s *MapsDataItem) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *OptStreamMetric) SetFake() {
	var elem StreamMetric
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStreamStream) SetFake() {
	var elem StreamStream
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *QueryResponse) SetFake() {
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *QueryResponseData) SetFake() {
	{
		{
			s.Stats.SetFake()
		}
	}
	{
		{
			s.Result.SetFake()
		}
	}
	{
		{
			s.ResultType.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *QueryResponseDataResultType) SetFake() {
	*s = QueryResponseDataResultTypeStreams
}

// SetFake set fake values.
func (s *Stats) SetFake() {
}

// SetFake set fake values.
func (s *Stream) SetFake() {
	{
		{
			s.Stream.SetFake()
		}
	}
	{
		{
			s.Metric.SetFake()
		}
	}
	{
		{
			s.Values = nil
			for i := 0; i < 0; i++ {
				var elem Entry
				{
					elem.SetFake()
				}
				s.Values = append(s.Values, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *StreamMetric) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *StreamStream) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Streams) SetFake() {
	var unwrapped []Stream
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Stream
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = Streams(unwrapped)
}

// SetFake set fake values.
func (s *Value) SetFake() {
	var variant string

	{
		variant = "string"
	}
	s.SetString(variant)
}

// SetFake set fake values.
func (s *Values) SetFake() {
	{
		{
			s.Data = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Data = append(s.Data, elem)
			}
		}
	}
	{
		{
			s.Status = "string"
		}
	}
}
