// Code generated by ogen, DO NOT EDIT.

package sentryapi

import (
	"fmt"
	"net/url"

	"github.com/go-faster/errors"
)

// SentryURLServer is a server URL template.
type SentryURLServer struct {
	ProjectID string `json:"projectID" yaml:"projectID"`
}

// MustPath returns the computed path. It panics if any error occurs.
func (s SentryURLServer) MustPath() string {
	return errors.Must(s.Path())
}

// Path returns the computed path.
func (s SentryURLServer) Path() (string, error) {
	raw, err := s.Build()
	if err != nil {
		return "", err
	}
	u, err := url.Parse(raw)
	if err != nil {
		return "", err
	}
	return u.Path, nil
}

// MustBuild returns the computed server URL. It panics if any error occurs.
func (s SentryURLServer) MustBuild() string {
	return errors.Must(s.Build())
}

// Build returns the computed server URL.
//
// If variable is empty, it uses the default value.
// If spec defines an enum and given value is not in the enum, it returns an error.
//
// Notice that given values will not be escaped and may cause invalid URL.
func (s SentryURLServer) Build() (string, error) {
	zeroOr := func(s string, def string) string {
		if s == "" {
			return def
		}
		return s
	}
	s.ProjectID = zeroOr(s.ProjectID, "unknown")
	return fmt.Sprintf("http://localhost:8000/api/%s",
		s.ProjectID,
	), nil
}
