// Code generated by ogen, DO NOT EDIT.

package sentryapi

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/jx"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Breadcrumb specifies an application event that occurred before a Sentry event.
// An event may contain one or more breadcrumbs.
// See [this](https://develop.sentry.dev/sdk/event-payloads/breadcrumbs).
// Ref: #/components/schemas/Breadcrumb
type Breadcrumb struct {
	Type      OptString         `json:"type"`
	Category  OptString         `json:"category"`
	Message   OptString         `json:"message"`
	Data      OptBreadcrumbData `json:"data"`
	Level     OptLevel          `json:"level"`
	Timestamp OptTimestamp      `json:"timestamp"`
}

// GetType returns the value of Type.
func (s *Breadcrumb) GetType() OptString {
	return s.Type
}

// GetCategory returns the value of Category.
func (s *Breadcrumb) GetCategory() OptString {
	return s.Category
}

// GetMessage returns the value of Message.
func (s *Breadcrumb) GetMessage() OptString {
	return s.Message
}

// GetData returns the value of Data.
func (s *Breadcrumb) GetData() OptBreadcrumbData {
	return s.Data
}

// GetLevel returns the value of Level.
func (s *Breadcrumb) GetLevel() OptLevel {
	return s.Level
}

// GetTimestamp returns the value of Timestamp.
func (s *Breadcrumb) GetTimestamp() OptTimestamp {
	return s.Timestamp
}

// SetType sets the value of Type.
func (s *Breadcrumb) SetType(val OptString) {
	s.Type = val
}

// SetCategory sets the value of Category.
func (s *Breadcrumb) SetCategory(val OptString) {
	s.Category = val
}

// SetMessage sets the value of Message.
func (s *Breadcrumb) SetMessage(val OptString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *Breadcrumb) SetData(val OptBreadcrumbData) {
	s.Data = val
}

// SetLevel sets the value of Level.
func (s *Breadcrumb) SetLevel(val OptLevel) {
	s.Level = val
}

// SetTimestamp sets the value of Timestamp.
func (s *Breadcrumb) SetTimestamp(val OptTimestamp) {
	s.Timestamp = val
}

type BreadcrumbData map[string]jx.Raw

func (s *BreadcrumbData) init() BreadcrumbData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// See [this](https://develop.sentry.dev/sdk/event-payloads/contexts/).
// Ref: #/components/schemas/Context
type Context map[string]jx.Raw

func (s *Context) init() Context {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// See [this](https://develop.sentry.dev/sdk/event-payloads/debugmeta#debug-images).
// Ref: #/components/schemas/DebugImage
type DebugImage struct {
	Type        string    `json:"type"`
	ImageAddr   OptString `json:"image_addr"`
	ImageSize   OptInt    `json:"image_size"`
	DebugID     OptString `json:"debug_id"`
	DebugFile   OptString `json:"debug_file"`
	CodeID      OptString `json:"code_id"`
	CodeFile    OptString `json:"code_file"`
	ImageVmaddr OptString `json:"image_vmaddr"`
	Arch        OptString `json:"arch"`
	UUID        OptString `json:"uuid"`
}

// GetType returns the value of Type.
func (s *DebugImage) GetType() string {
	return s.Type
}

// GetImageAddr returns the value of ImageAddr.
func (s *DebugImage) GetImageAddr() OptString {
	return s.ImageAddr
}

// GetImageSize returns the value of ImageSize.
func (s *DebugImage) GetImageSize() OptInt {
	return s.ImageSize
}

// GetDebugID returns the value of DebugID.
func (s *DebugImage) GetDebugID() OptString {
	return s.DebugID
}

// GetDebugFile returns the value of DebugFile.
func (s *DebugImage) GetDebugFile() OptString {
	return s.DebugFile
}

// GetCodeID returns the value of CodeID.
func (s *DebugImage) GetCodeID() OptString {
	return s.CodeID
}

// GetCodeFile returns the value of CodeFile.
func (s *DebugImage) GetCodeFile() OptString {
	return s.CodeFile
}

// GetImageVmaddr returns the value of ImageVmaddr.
func (s *DebugImage) GetImageVmaddr() OptString {
	return s.ImageVmaddr
}

// GetArch returns the value of Arch.
func (s *DebugImage) GetArch() OptString {
	return s.Arch
}

// GetUUID returns the value of UUID.
func (s *DebugImage) GetUUID() OptString {
	return s.UUID
}

// SetType sets the value of Type.
func (s *DebugImage) SetType(val string) {
	s.Type = val
}

// SetImageAddr sets the value of ImageAddr.
func (s *DebugImage) SetImageAddr(val OptString) {
	s.ImageAddr = val
}

// SetImageSize sets the value of ImageSize.
func (s *DebugImage) SetImageSize(val OptInt) {
	s.ImageSize = val
}

// SetDebugID sets the value of DebugID.
func (s *DebugImage) SetDebugID(val OptString) {
	s.DebugID = val
}

// SetDebugFile sets the value of DebugFile.
func (s *DebugImage) SetDebugFile(val OptString) {
	s.DebugFile = val
}

// SetCodeID sets the value of CodeID.
func (s *DebugImage) SetCodeID(val OptString) {
	s.CodeID = val
}

// SetCodeFile sets the value of CodeFile.
func (s *DebugImage) SetCodeFile(val OptString) {
	s.CodeFile = val
}

// SetImageVmaddr sets the value of ImageVmaddr.
func (s *DebugImage) SetImageVmaddr(val OptString) {
	s.ImageVmaddr = val
}

// SetArch sets the value of Arch.
func (s *DebugImage) SetArch(val OptString) {
	s.Arch = val
}

// SetUUID sets the value of UUID.
func (s *DebugImage) SetUUID(val OptString) {
	s.UUID = val
}

// See [this](https://develop.sentry.dev/sdk/event-payloads/debugmeta).
// Ref: #/components/schemas/DebugMeta
type DebugMeta struct {
	SdkInfo OptDebugMetaSdkInfo `json:"sdk_info"`
	Images  OptDebugImage       `json:"images"`
}

// GetSdkInfo returns the value of SdkInfo.
func (s *DebugMeta) GetSdkInfo() OptDebugMetaSdkInfo {
	return s.SdkInfo
}

// GetImages returns the value of Images.
func (s *DebugMeta) GetImages() OptDebugImage {
	return s.Images
}

// SetSdkInfo sets the value of SdkInfo.
func (s *DebugMeta) SetSdkInfo(val OptDebugMetaSdkInfo) {
	s.SdkInfo = val
}

// SetImages sets the value of Images.
func (s *DebugMeta) SetImages(val OptDebugImage) {
	s.Images = val
}

// Ref: #/components/schemas/DebugMetaSdkInfo
type DebugMetaSdkInfo struct {
	SdkName           OptString `json:"sdk_name"`
	VersionMajor      OptInt    `json:"version_major"`
	VersionMinor      OptInt    `json:"version_minor"`
	VersionPatchlevel OptInt    `json:"version_patchlevel"`
}

// GetSdkName returns the value of SdkName.
func (s *DebugMetaSdkInfo) GetSdkName() OptString {
	return s.SdkName
}

// GetVersionMajor returns the value of VersionMajor.
func (s *DebugMetaSdkInfo) GetVersionMajor() OptInt {
	return s.VersionMajor
}

// GetVersionMinor returns the value of VersionMinor.
func (s *DebugMetaSdkInfo) GetVersionMinor() OptInt {
	return s.VersionMinor
}

// GetVersionPatchlevel returns the value of VersionPatchlevel.
func (s *DebugMetaSdkInfo) GetVersionPatchlevel() OptInt {
	return s.VersionPatchlevel
}

// SetSdkName sets the value of SdkName.
func (s *DebugMetaSdkInfo) SetSdkName(val OptString) {
	s.SdkName = val
}

// SetVersionMajor sets the value of VersionMajor.
func (s *DebugMetaSdkInfo) SetVersionMajor(val OptInt) {
	s.VersionMajor = val
}

// SetVersionMinor sets the value of VersionMinor.
func (s *DebugMetaSdkInfo) SetVersionMinor(val OptInt) {
	s.VersionMinor = val
}

// SetVersionPatchlevel sets the value of VersionPatchlevel.
func (s *DebugMetaSdkInfo) SetVersionPatchlevel(val OptInt) {
	s.VersionPatchlevel = val
}

// EnvelopeOK is response for Envelope operation.
type EnvelopeOK struct{}

type EnvelopeReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s EnvelopeReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// EnvelopeReqWithContentType wraps EnvelopeReq with Content-Type.
type EnvelopeReqWithContentType struct {
	ContentType string
	Content     EnvelopeReq
}

// GetContentType returns the value of ContentType.
func (s *EnvelopeReqWithContentType) GetContentType() string {
	return s.ContentType
}

// GetContent returns the value of Content.
func (s *EnvelopeReqWithContentType) GetContent() EnvelopeReq {
	return s.Content
}

// SetContentType sets the value of ContentType.
func (s *EnvelopeReqWithContentType) SetContentType(val string) {
	s.ContentType = val
}

// SetContent sets the value of Content.
func (s *EnvelopeReqWithContentType) SetContent(val EnvelopeReq) {
	s.Content = val
}

// See [this](https://develop.sentry.dev/sdk/event-payloads/exception/#errno).
// Ref: #/components/schemas/Errno
type Errno struct {
	Number int       `json:"number"`
	Name   OptString `json:"name"`
}

// GetNumber returns the value of Number.
func (s *Errno) GetNumber() int {
	return s.Number
}

// GetName returns the value of Name.
func (s *Errno) GetName() OptString {
	return s.Name
}

// SetNumber sets the value of Number.
func (s *Errno) SetNumber(val int) {
	s.Number = val
}

// SetName sets the value of Name.
func (s *Errno) SetName(val OptString) {
	s.Name = val
}

type Error string

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Event is the fundamental data structure that is sent to Sentry.
// See [this](https://develop.sentry.dev/sdk/event-payloads).
// Ref: #/components/schemas/Event
type Event struct {
	Breadcrumbs     []Breadcrumb       `json:"breadcrumbs"`
	Contexts        OptEventContexts   `json:"contexts"`
	Dist            OptString          `json:"dist"`
	Environment     OptString          `json:"environment"`
	EventID         EventID            `json:"event_id"`
	Extra           OptEventExtra      `json:"extra"`
	Fingerprint     []string           `json:"fingerprint"`
	Level           OptLevel           `json:"level"`
	Message         OptString          `json:"message"`
	Platform        string             `json:"platform"`
	Release         OptString          `json:"release"`
	Sdk             OptSdkInfo         `json:"sdk"`
	ServerName      OptString          `json:"server_name"`
	Threads         []Thread           `json:"threads"`
	Tags            OptEventTags       `json:"tags"`
	Timestamp       Timestamp          `json:"timestamp"`
	Transaction     OptString          `json:"transaction"`
	User            OptUser            `json:"user"`
	Logger          OptString          `json:"logger"`
	Modules         OptEventModules    `json:"modules"`
	Request         OptRequest         `json:"request"`
	Exception       []Exception        `json:"exception"`
	DebugMeta       OptDebugMeta       `json:"debug_meta"`
	Type            OptString          `json:"type"`
	StartTimestamp  OptTimestamp       `json:"start_timestamp"`
	Spans           []Span             `json:"spans"`
	TransactionInfo OptTransactionInfo `json:"transaction_info"`
}

// GetBreadcrumbs returns the value of Breadcrumbs.
func (s *Event) GetBreadcrumbs() []Breadcrumb {
	return s.Breadcrumbs
}

// GetContexts returns the value of Contexts.
func (s *Event) GetContexts() OptEventContexts {
	return s.Contexts
}

// GetDist returns the value of Dist.
func (s *Event) GetDist() OptString {
	return s.Dist
}

// GetEnvironment returns the value of Environment.
func (s *Event) GetEnvironment() OptString {
	return s.Environment
}

// GetEventID returns the value of EventID.
func (s *Event) GetEventID() EventID {
	return s.EventID
}

// GetExtra returns the value of Extra.
func (s *Event) GetExtra() OptEventExtra {
	return s.Extra
}

// GetFingerprint returns the value of Fingerprint.
func (s *Event) GetFingerprint() []string {
	return s.Fingerprint
}

// GetLevel returns the value of Level.
func (s *Event) GetLevel() OptLevel {
	return s.Level
}

// GetMessage returns the value of Message.
func (s *Event) GetMessage() OptString {
	return s.Message
}

// GetPlatform returns the value of Platform.
func (s *Event) GetPlatform() string {
	return s.Platform
}

// GetRelease returns the value of Release.
func (s *Event) GetRelease() OptString {
	return s.Release
}

// GetSdk returns the value of Sdk.
func (s *Event) GetSdk() OptSdkInfo {
	return s.Sdk
}

// GetServerName returns the value of ServerName.
func (s *Event) GetServerName() OptString {
	return s.ServerName
}

// GetThreads returns the value of Threads.
func (s *Event) GetThreads() []Thread {
	return s.Threads
}

// GetTags returns the value of Tags.
func (s *Event) GetTags() OptEventTags {
	return s.Tags
}

// GetTimestamp returns the value of Timestamp.
func (s *Event) GetTimestamp() Timestamp {
	return s.Timestamp
}

// GetTransaction returns the value of Transaction.
func (s *Event) GetTransaction() OptString {
	return s.Transaction
}

// GetUser returns the value of User.
func (s *Event) GetUser() OptUser {
	return s.User
}

// GetLogger returns the value of Logger.
func (s *Event) GetLogger() OptString {
	return s.Logger
}

// GetModules returns the value of Modules.
func (s *Event) GetModules() OptEventModules {
	return s.Modules
}

// GetRequest returns the value of Request.
func (s *Event) GetRequest() OptRequest {
	return s.Request
}

// GetException returns the value of Exception.
func (s *Event) GetException() []Exception {
	return s.Exception
}

// GetDebugMeta returns the value of DebugMeta.
func (s *Event) GetDebugMeta() OptDebugMeta {
	return s.DebugMeta
}

// GetType returns the value of Type.
func (s *Event) GetType() OptString {
	return s.Type
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *Event) GetStartTimestamp() OptTimestamp {
	return s.StartTimestamp
}

// GetSpans returns the value of Spans.
func (s *Event) GetSpans() []Span {
	return s.Spans
}

// GetTransactionInfo returns the value of TransactionInfo.
func (s *Event) GetTransactionInfo() OptTransactionInfo {
	return s.TransactionInfo
}

// SetBreadcrumbs sets the value of Breadcrumbs.
func (s *Event) SetBreadcrumbs(val []Breadcrumb) {
	s.Breadcrumbs = val
}

// SetContexts sets the value of Contexts.
func (s *Event) SetContexts(val OptEventContexts) {
	s.Contexts = val
}

// SetDist sets the value of Dist.
func (s *Event) SetDist(val OptString) {
	s.Dist = val
}

// SetEnvironment sets the value of Environment.
func (s *Event) SetEnvironment(val OptString) {
	s.Environment = val
}

// SetEventID sets the value of EventID.
func (s *Event) SetEventID(val EventID) {
	s.EventID = val
}

// SetExtra sets the value of Extra.
func (s *Event) SetExtra(val OptEventExtra) {
	s.Extra = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *Event) SetFingerprint(val []string) {
	s.Fingerprint = val
}

// SetLevel sets the value of Level.
func (s *Event) SetLevel(val OptLevel) {
	s.Level = val
}

// SetMessage sets the value of Message.
func (s *Event) SetMessage(val OptString) {
	s.Message = val
}

// SetPlatform sets the value of Platform.
func (s *Event) SetPlatform(val string) {
	s.Platform = val
}

// SetRelease sets the value of Release.
func (s *Event) SetRelease(val OptString) {
	s.Release = val
}

// SetSdk sets the value of Sdk.
func (s *Event) SetSdk(val OptSdkInfo) {
	s.Sdk = val
}

// SetServerName sets the value of ServerName.
func (s *Event) SetServerName(val OptString) {
	s.ServerName = val
}

// SetThreads sets the value of Threads.
func (s *Event) SetThreads(val []Thread) {
	s.Threads = val
}

// SetTags sets the value of Tags.
func (s *Event) SetTags(val OptEventTags) {
	s.Tags = val
}

// SetTimestamp sets the value of Timestamp.
func (s *Event) SetTimestamp(val Timestamp) {
	s.Timestamp = val
}

// SetTransaction sets the value of Transaction.
func (s *Event) SetTransaction(val OptString) {
	s.Transaction = val
}

// SetUser sets the value of User.
func (s *Event) SetUser(val OptUser) {
	s.User = val
}

// SetLogger sets the value of Logger.
func (s *Event) SetLogger(val OptString) {
	s.Logger = val
}

// SetModules sets the value of Modules.
func (s *Event) SetModules(val OptEventModules) {
	s.Modules = val
}

// SetRequest sets the value of Request.
func (s *Event) SetRequest(val OptRequest) {
	s.Request = val
}

// SetException sets the value of Exception.
func (s *Event) SetException(val []Exception) {
	s.Exception = val
}

// SetDebugMeta sets the value of DebugMeta.
func (s *Event) SetDebugMeta(val OptDebugMeta) {
	s.DebugMeta = val
}

// SetType sets the value of Type.
func (s *Event) SetType(val OptString) {
	s.Type = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *Event) SetStartTimestamp(val OptTimestamp) {
	s.StartTimestamp = val
}

// SetSpans sets the value of Spans.
func (s *Event) SetSpans(val []Span) {
	s.Spans = val
}

// SetTransactionInfo sets the value of TransactionInfo.
func (s *Event) SetTransactionInfo(val OptTransactionInfo) {
	s.TransactionInfo = val
}

type EventContexts map[string]Context

func (s *EventContexts) init() EventContexts {
	m := *s
	if m == nil {
		m = map[string]Context{}
		*s = m
	}
	return m
}

type EventExtra map[string]jx.Raw

func (s *EventExtra) init() EventExtra {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type EventID string

type EventModules map[string]string

func (s *EventModules) init() EventModules {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type EventTags map[string]string

func (s *EventTags) init() EventTags {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Exception specifies an error that occurred.
// See [this](https://develop.sentry.dev/sdk/event-payloads/exception/).
// Ref: #/components/schemas/Exception
type Exception struct {
	Type       string        `json:"type"`
	Value      string        `json:"value"`
	Module     OptString     `json:"module"`
	ThreadID   OptString     `json:"thread_id"`
	Stacktrace OptStacktrace `json:"stacktrace"`
	Mechanism  OptMechanism  `json:"mechanism"`
}

// GetType returns the value of Type.
func (s *Exception) GetType() string {
	return s.Type
}

// GetValue returns the value of Value.
func (s *Exception) GetValue() string {
	return s.Value
}

// GetModule returns the value of Module.
func (s *Exception) GetModule() OptString {
	return s.Module
}

// GetThreadID returns the value of ThreadID.
func (s *Exception) GetThreadID() OptString {
	return s.ThreadID
}

// GetStacktrace returns the value of Stacktrace.
func (s *Exception) GetStacktrace() OptStacktrace {
	return s.Stacktrace
}

// GetMechanism returns the value of Mechanism.
func (s *Exception) GetMechanism() OptMechanism {
	return s.Mechanism
}

// SetType sets the value of Type.
func (s *Exception) SetType(val string) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *Exception) SetValue(val string) {
	s.Value = val
}

// SetModule sets the value of Module.
func (s *Exception) SetModule(val OptString) {
	s.Module = val
}

// SetThreadID sets the value of ThreadID.
func (s *Exception) SetThreadID(val OptString) {
	s.ThreadID = val
}

// SetStacktrace sets the value of Stacktrace.
func (s *Exception) SetStacktrace(val OptStacktrace) {
	s.Stacktrace = val
}

// SetMechanism sets the value of Mechanism.
func (s *Exception) SetMechanism(val OptMechanism) {
	s.Mechanism = val
}

// Frame represents a function call and it's metadata. Frames are associated with a Stacktrace.
// See [this](https://develop.sentry.dev/sdk/event-payloads/stacktrace/).
// Ref: #/components/schemas/Frame
type Frame struct {
	Function        OptString    `json:"function"`
	Symbol          OptString    `json:"symbol"`
	Module          OptString    `json:"module"`
	Filename        OptString    `json:"filename"`
	AbsPath         OptString    `json:"abs_path"`
	Lineno          OptInt       `json:"lineno"`
	Colno           OptInt       `json:"colno"`
	PreContext      []string     `json:"pre_context"`
	ContextLine     OptString    `json:"context_line"`
	PostContext     []string     `json:"post_context"`
	InApp           OptBool      `json:"in_app"`
	Vars            OptFrameVars `json:"vars"`
	Package         OptString    `json:"package"`
	InstructionAddr OptString    `json:"instruction_addr"`
	AddrMode        OptString    `json:"addr_mode"`
	SymbolAddr      OptString    `json:"symbol_addr"`
	ImageAddr       OptString    `json:"image_addr"`
	Platform        OptString    `json:"platform"`
	StackStart      OptBool      `json:"stack_start"`
}

// GetFunction returns the value of Function.
func (s *Frame) GetFunction() OptString {
	return s.Function
}

// GetSymbol returns the value of Symbol.
func (s *Frame) GetSymbol() OptString {
	return s.Symbol
}

// GetModule returns the value of Module.
func (s *Frame) GetModule() OptString {
	return s.Module
}

// GetFilename returns the value of Filename.
func (s *Frame) GetFilename() OptString {
	return s.Filename
}

// GetAbsPath returns the value of AbsPath.
func (s *Frame) GetAbsPath() OptString {
	return s.AbsPath
}

// GetLineno returns the value of Lineno.
func (s *Frame) GetLineno() OptInt {
	return s.Lineno
}

// GetColno returns the value of Colno.
func (s *Frame) GetColno() OptInt {
	return s.Colno
}

// GetPreContext returns the value of PreContext.
func (s *Frame) GetPreContext() []string {
	return s.PreContext
}

// GetContextLine returns the value of ContextLine.
func (s *Frame) GetContextLine() OptString {
	return s.ContextLine
}

// GetPostContext returns the value of PostContext.
func (s *Frame) GetPostContext() []string {
	return s.PostContext
}

// GetInApp returns the value of InApp.
func (s *Frame) GetInApp() OptBool {
	return s.InApp
}

// GetVars returns the value of Vars.
func (s *Frame) GetVars() OptFrameVars {
	return s.Vars
}

// GetPackage returns the value of Package.
func (s *Frame) GetPackage() OptString {
	return s.Package
}

// GetInstructionAddr returns the value of InstructionAddr.
func (s *Frame) GetInstructionAddr() OptString {
	return s.InstructionAddr
}

// GetAddrMode returns the value of AddrMode.
func (s *Frame) GetAddrMode() OptString {
	return s.AddrMode
}

// GetSymbolAddr returns the value of SymbolAddr.
func (s *Frame) GetSymbolAddr() OptString {
	return s.SymbolAddr
}

// GetImageAddr returns the value of ImageAddr.
func (s *Frame) GetImageAddr() OptString {
	return s.ImageAddr
}

// GetPlatform returns the value of Platform.
func (s *Frame) GetPlatform() OptString {
	return s.Platform
}

// GetStackStart returns the value of StackStart.
func (s *Frame) GetStackStart() OptBool {
	return s.StackStart
}

// SetFunction sets the value of Function.
func (s *Frame) SetFunction(val OptString) {
	s.Function = val
}

// SetSymbol sets the value of Symbol.
func (s *Frame) SetSymbol(val OptString) {
	s.Symbol = val
}

// SetModule sets the value of Module.
func (s *Frame) SetModule(val OptString) {
	s.Module = val
}

// SetFilename sets the value of Filename.
func (s *Frame) SetFilename(val OptString) {
	s.Filename = val
}

// SetAbsPath sets the value of AbsPath.
func (s *Frame) SetAbsPath(val OptString) {
	s.AbsPath = val
}

// SetLineno sets the value of Lineno.
func (s *Frame) SetLineno(val OptInt) {
	s.Lineno = val
}

// SetColno sets the value of Colno.
func (s *Frame) SetColno(val OptInt) {
	s.Colno = val
}

// SetPreContext sets the value of PreContext.
func (s *Frame) SetPreContext(val []string) {
	s.PreContext = val
}

// SetContextLine sets the value of ContextLine.
func (s *Frame) SetContextLine(val OptString) {
	s.ContextLine = val
}

// SetPostContext sets the value of PostContext.
func (s *Frame) SetPostContext(val []string) {
	s.PostContext = val
}

// SetInApp sets the value of InApp.
func (s *Frame) SetInApp(val OptBool) {
	s.InApp = val
}

// SetVars sets the value of Vars.
func (s *Frame) SetVars(val OptFrameVars) {
	s.Vars = val
}

// SetPackage sets the value of Package.
func (s *Frame) SetPackage(val OptString) {
	s.Package = val
}

// SetInstructionAddr sets the value of InstructionAddr.
func (s *Frame) SetInstructionAddr(val OptString) {
	s.InstructionAddr = val
}

// SetAddrMode sets the value of AddrMode.
func (s *Frame) SetAddrMode(val OptString) {
	s.AddrMode = val
}

// SetSymbolAddr sets the value of SymbolAddr.
func (s *Frame) SetSymbolAddr(val OptString) {
	s.SymbolAddr = val
}

// SetImageAddr sets the value of ImageAddr.
func (s *Frame) SetImageAddr(val OptString) {
	s.ImageAddr = val
}

// SetPlatform sets the value of Platform.
func (s *Frame) SetPlatform(val OptString) {
	s.Platform = val
}

// SetStackStart sets the value of StackStart.
func (s *Frame) SetStackStart(val OptBool) {
	s.StackStart = val
}

type FrameVars map[string]jx.Raw

func (s *FrameVars) init() FrameVars {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type Level string

// See [this](https://develop.sentry.dev/sdk/event-payloads/exception/#mach_exception).
// Ref: #/components/schemas/MachException
type MachException struct {
	Exception int       `json:"exception"`
	Code      int       `json:"code"`
	Subcode   int       `json:"subcode"`
	Name      OptString `json:"name"`
}

// GetException returns the value of Exception.
func (s *MachException) GetException() int {
	return s.Exception
}

// GetCode returns the value of Code.
func (s *MachException) GetCode() int {
	return s.Code
}

// GetSubcode returns the value of Subcode.
func (s *MachException) GetSubcode() int {
	return s.Subcode
}

// GetName returns the value of Name.
func (s *MachException) GetName() OptString {
	return s.Name
}

// SetException sets the value of Exception.
func (s *MachException) SetException(val int) {
	s.Exception = val
}

// SetCode sets the value of Code.
func (s *MachException) SetCode(val int) {
	s.Code = val
}

// SetSubcode sets the value of Subcode.
func (s *MachException) SetSubcode(val int) {
	s.Subcode = val
}

// SetName sets the value of Name.
func (s *MachException) SetName(val OptString) {
	s.Name = val
}

// See [this](https://develop.sentry.dev/sdk/event-payloads/exception/#exception-mechanism).
// Ref: #/components/schemas/Mechanism
type Mechanism struct {
	Type        string           `json:"type"`
	Description OptString        `json:"description"`
	HelpLink    OptString        `json:"help_link"`
	Handled     OptBool          `json:"handled"`
	Synthetic   OptBool          `json:"synthetic"`
	Meta        OptMechanismMeta `json:"meta"`
	Data        OptMechanismData `json:"data"`
}

// GetType returns the value of Type.
func (s *Mechanism) GetType() string {
	return s.Type
}

// GetDescription returns the value of Description.
func (s *Mechanism) GetDescription() OptString {
	return s.Description
}

// GetHelpLink returns the value of HelpLink.
func (s *Mechanism) GetHelpLink() OptString {
	return s.HelpLink
}

// GetHandled returns the value of Handled.
func (s *Mechanism) GetHandled() OptBool {
	return s.Handled
}

// GetSynthetic returns the value of Synthetic.
func (s *Mechanism) GetSynthetic() OptBool {
	return s.Synthetic
}

// GetMeta returns the value of Meta.
func (s *Mechanism) GetMeta() OptMechanismMeta {
	return s.Meta
}

// GetData returns the value of Data.
func (s *Mechanism) GetData() OptMechanismData {
	return s.Data
}

// SetType sets the value of Type.
func (s *Mechanism) SetType(val string) {
	s.Type = val
}

// SetDescription sets the value of Description.
func (s *Mechanism) SetDescription(val OptString) {
	s.Description = val
}

// SetHelpLink sets the value of HelpLink.
func (s *Mechanism) SetHelpLink(val OptString) {
	s.HelpLink = val
}

// SetHandled sets the value of Handled.
func (s *Mechanism) SetHandled(val OptBool) {
	s.Handled = val
}

// SetSynthetic sets the value of Synthetic.
func (s *Mechanism) SetSynthetic(val OptBool) {
	s.Synthetic = val
}

// SetMeta sets the value of Meta.
func (s *Mechanism) SetMeta(val OptMechanismMeta) {
	s.Meta = val
}

// SetData sets the value of Data.
func (s *Mechanism) SetData(val OptMechanismData) {
	s.Data = val
}

type MechanismData map[string]jx.Raw

func (s *MechanismData) init() MechanismData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type MechanismMeta struct {
	Signal        OptSignal        `json:"signal"`
	MachException OptMachException `json:"mach_exception"`
	NsError       OptNSError       `json:"ns_error"`
	Errno         OptErrno         `json:"errno"`
}

// GetSignal returns the value of Signal.
func (s *MechanismMeta) GetSignal() OptSignal {
	return s.Signal
}

// GetMachException returns the value of MachException.
func (s *MechanismMeta) GetMachException() OptMachException {
	return s.MachException
}

// GetNsError returns the value of NsError.
func (s *MechanismMeta) GetNsError() OptNSError {
	return s.NsError
}

// GetErrno returns the value of Errno.
func (s *MechanismMeta) GetErrno() OptErrno {
	return s.Errno
}

// SetSignal sets the value of Signal.
func (s *MechanismMeta) SetSignal(val OptSignal) {
	s.Signal = val
}

// SetMachException sets the value of MachException.
func (s *MechanismMeta) SetMachException(val OptMachException) {
	s.MachException = val
}

// SetNsError sets the value of NsError.
func (s *MechanismMeta) SetNsError(val OptNSError) {
	s.NsError = val
}

// SetErrno sets the value of Errno.
func (s *MechanismMeta) SetErrno(val OptErrno) {
	s.Errno = val
}

// See [this](https://develop.sentry.dev/sdk/event-payloads/exception/#ns_error).
// Ref: #/components/schemas/NSError
type NSError struct {
	Code   int       `json:"code"`
	Domain OptString `json:"domain"`
}

// GetCode returns the value of Code.
func (s *NSError) GetCode() int {
	return s.Code
}

// GetDomain returns the value of Domain.
func (s *NSError) GetDomain() OptString {
	return s.Domain
}

// SetCode sets the value of Code.
func (s *NSError) SetCode(val int) {
	s.Code = val
}

// SetDomain sets the value of Domain.
func (s *NSError) SetDomain(val OptString) {
	s.Domain = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBreadcrumbData returns new OptBreadcrumbData with value set to v.
func NewOptBreadcrumbData(v BreadcrumbData) OptBreadcrumbData {
	return OptBreadcrumbData{
		Value: v,
		Set:   true,
	}
}

// OptBreadcrumbData is optional BreadcrumbData.
type OptBreadcrumbData struct {
	Value BreadcrumbData
	Set   bool
}

// IsSet returns true if OptBreadcrumbData was set.
func (o OptBreadcrumbData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBreadcrumbData) Reset() {
	var v BreadcrumbData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBreadcrumbData) SetTo(v BreadcrumbData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBreadcrumbData) Get() (v BreadcrumbData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBreadcrumbData) Or(d BreadcrumbData) BreadcrumbData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDebugImage returns new OptDebugImage with value set to v.
func NewOptDebugImage(v DebugImage) OptDebugImage {
	return OptDebugImage{
		Value: v,
		Set:   true,
	}
}

// OptDebugImage is optional DebugImage.
type OptDebugImage struct {
	Value DebugImage
	Set   bool
}

// IsSet returns true if OptDebugImage was set.
func (o OptDebugImage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDebugImage) Reset() {
	var v DebugImage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDebugImage) SetTo(v DebugImage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDebugImage) Get() (v DebugImage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDebugImage) Or(d DebugImage) DebugImage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDebugMeta returns new OptDebugMeta with value set to v.
func NewOptDebugMeta(v DebugMeta) OptDebugMeta {
	return OptDebugMeta{
		Value: v,
		Set:   true,
	}
}

// OptDebugMeta is optional DebugMeta.
type OptDebugMeta struct {
	Value DebugMeta
	Set   bool
}

// IsSet returns true if OptDebugMeta was set.
func (o OptDebugMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDebugMeta) Reset() {
	var v DebugMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDebugMeta) SetTo(v DebugMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDebugMeta) Get() (v DebugMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDebugMeta) Or(d DebugMeta) DebugMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDebugMetaSdkInfo returns new OptDebugMetaSdkInfo with value set to v.
func NewOptDebugMetaSdkInfo(v DebugMetaSdkInfo) OptDebugMetaSdkInfo {
	return OptDebugMetaSdkInfo{
		Value: v,
		Set:   true,
	}
}

// OptDebugMetaSdkInfo is optional DebugMetaSdkInfo.
type OptDebugMetaSdkInfo struct {
	Value DebugMetaSdkInfo
	Set   bool
}

// IsSet returns true if OptDebugMetaSdkInfo was set.
func (o OptDebugMetaSdkInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDebugMetaSdkInfo) Reset() {
	var v DebugMetaSdkInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDebugMetaSdkInfo) SetTo(v DebugMetaSdkInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDebugMetaSdkInfo) Get() (v DebugMetaSdkInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDebugMetaSdkInfo) Or(d DebugMetaSdkInfo) DebugMetaSdkInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrno returns new OptErrno with value set to v.
func NewOptErrno(v Errno) OptErrno {
	return OptErrno{
		Value: v,
		Set:   true,
	}
}

// OptErrno is optional Errno.
type OptErrno struct {
	Value Errno
	Set   bool
}

// IsSet returns true if OptErrno was set.
func (o OptErrno) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrno) Reset() {
	var v Errno
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrno) SetTo(v Errno) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrno) Get() (v Errno, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrno) Or(d Errno) Errno {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventContexts returns new OptEventContexts with value set to v.
func NewOptEventContexts(v EventContexts) OptEventContexts {
	return OptEventContexts{
		Value: v,
		Set:   true,
	}
}

// OptEventContexts is optional EventContexts.
type OptEventContexts struct {
	Value EventContexts
	Set   bool
}

// IsSet returns true if OptEventContexts was set.
func (o OptEventContexts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventContexts) Reset() {
	var v EventContexts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventContexts) SetTo(v EventContexts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventContexts) Get() (v EventContexts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventContexts) Or(d EventContexts) EventContexts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventExtra returns new OptEventExtra with value set to v.
func NewOptEventExtra(v EventExtra) OptEventExtra {
	return OptEventExtra{
		Value: v,
		Set:   true,
	}
}

// OptEventExtra is optional EventExtra.
type OptEventExtra struct {
	Value EventExtra
	Set   bool
}

// IsSet returns true if OptEventExtra was set.
func (o OptEventExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventExtra) Reset() {
	var v EventExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventExtra) SetTo(v EventExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventExtra) Get() (v EventExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventExtra) Or(d EventExtra) EventExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventModules returns new OptEventModules with value set to v.
func NewOptEventModules(v EventModules) OptEventModules {
	return OptEventModules{
		Value: v,
		Set:   true,
	}
}

// OptEventModules is optional EventModules.
type OptEventModules struct {
	Value EventModules
	Set   bool
}

// IsSet returns true if OptEventModules was set.
func (o OptEventModules) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventModules) Reset() {
	var v EventModules
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventModules) SetTo(v EventModules) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventModules) Get() (v EventModules, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventModules) Or(d EventModules) EventModules {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventTags returns new OptEventTags with value set to v.
func NewOptEventTags(v EventTags) OptEventTags {
	return OptEventTags{
		Value: v,
		Set:   true,
	}
}

// OptEventTags is optional EventTags.
type OptEventTags struct {
	Value EventTags
	Set   bool
}

// IsSet returns true if OptEventTags was set.
func (o OptEventTags) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventTags) Reset() {
	var v EventTags
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventTags) SetTo(v EventTags) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventTags) Get() (v EventTags, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventTags) Or(d EventTags) EventTags {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFrameVars returns new OptFrameVars with value set to v.
func NewOptFrameVars(v FrameVars) OptFrameVars {
	return OptFrameVars{
		Value: v,
		Set:   true,
	}
}

// OptFrameVars is optional FrameVars.
type OptFrameVars struct {
	Value FrameVars
	Set   bool
}

// IsSet returns true if OptFrameVars was set.
func (o OptFrameVars) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFrameVars) Reset() {
	var v FrameVars
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFrameVars) SetTo(v FrameVars) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFrameVars) Get() (v FrameVars, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFrameVars) Or(d FrameVars) FrameVars {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLevel returns new OptLevel with value set to v.
func NewOptLevel(v Level) OptLevel {
	return OptLevel{
		Value: v,
		Set:   true,
	}
}

// OptLevel is optional Level.
type OptLevel struct {
	Value Level
	Set   bool
}

// IsSet returns true if OptLevel was set.
func (o OptLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLevel) Reset() {
	var v Level
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLevel) SetTo(v Level) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLevel) Get() (v Level, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLevel) Or(d Level) Level {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMachException returns new OptMachException with value set to v.
func NewOptMachException(v MachException) OptMachException {
	return OptMachException{
		Value: v,
		Set:   true,
	}
}

// OptMachException is optional MachException.
type OptMachException struct {
	Value MachException
	Set   bool
}

// IsSet returns true if OptMachException was set.
func (o OptMachException) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMachException) Reset() {
	var v MachException
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMachException) SetTo(v MachException) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMachException) Get() (v MachException, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMachException) Or(d MachException) MachException {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMechanism returns new OptMechanism with value set to v.
func NewOptMechanism(v Mechanism) OptMechanism {
	return OptMechanism{
		Value: v,
		Set:   true,
	}
}

// OptMechanism is optional Mechanism.
type OptMechanism struct {
	Value Mechanism
	Set   bool
}

// IsSet returns true if OptMechanism was set.
func (o OptMechanism) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMechanism) Reset() {
	var v Mechanism
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMechanism) SetTo(v Mechanism) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMechanism) Get() (v Mechanism, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMechanism) Or(d Mechanism) Mechanism {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMechanismData returns new OptMechanismData with value set to v.
func NewOptMechanismData(v MechanismData) OptMechanismData {
	return OptMechanismData{
		Value: v,
		Set:   true,
	}
}

// OptMechanismData is optional MechanismData.
type OptMechanismData struct {
	Value MechanismData
	Set   bool
}

// IsSet returns true if OptMechanismData was set.
func (o OptMechanismData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMechanismData) Reset() {
	var v MechanismData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMechanismData) SetTo(v MechanismData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMechanismData) Get() (v MechanismData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMechanismData) Or(d MechanismData) MechanismData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMechanismMeta returns new OptMechanismMeta with value set to v.
func NewOptMechanismMeta(v MechanismMeta) OptMechanismMeta {
	return OptMechanismMeta{
		Value: v,
		Set:   true,
	}
}

// OptMechanismMeta is optional MechanismMeta.
type OptMechanismMeta struct {
	Value MechanismMeta
	Set   bool
}

// IsSet returns true if OptMechanismMeta was set.
func (o OptMechanismMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMechanismMeta) Reset() {
	var v MechanismMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMechanismMeta) SetTo(v MechanismMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMechanismMeta) Get() (v MechanismMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMechanismMeta) Or(d MechanismMeta) MechanismMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNSError returns new OptNSError with value set to v.
func NewOptNSError(v NSError) OptNSError {
	return OptNSError{
		Value: v,
		Set:   true,
	}
}

// OptNSError is optional NSError.
type OptNSError struct {
	Value NSError
	Set   bool
}

// IsSet returns true if OptNSError was set.
func (o OptNSError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNSError) Reset() {
	var v NSError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNSError) SetTo(v NSError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNSError) Get() (v NSError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNSError) Or(d NSError) NSError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequest returns new OptRequest with value set to v.
func NewOptRequest(v Request) OptRequest {
	return OptRequest{
		Value: v,
		Set:   true,
	}
}

// OptRequest is optional Request.
type OptRequest struct {
	Value Request
	Set   bool
}

// IsSet returns true if OptRequest was set.
func (o OptRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequest) Reset() {
	var v Request
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequest) SetTo(v Request) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequest) Get() (v Request, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequest) Or(d Request) Request {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequestEnv returns new OptRequestEnv with value set to v.
func NewOptRequestEnv(v RequestEnv) OptRequestEnv {
	return OptRequestEnv{
		Value: v,
		Set:   true,
	}
}

// OptRequestEnv is optional RequestEnv.
type OptRequestEnv struct {
	Value RequestEnv
	Set   bool
}

// IsSet returns true if OptRequestEnv was set.
func (o OptRequestEnv) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequestEnv) Reset() {
	var v RequestEnv
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequestEnv) SetTo(v RequestEnv) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequestEnv) Get() (v RequestEnv, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequestEnv) Or(d RequestEnv) RequestEnv {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequestHeaders returns new OptRequestHeaders with value set to v.
func NewOptRequestHeaders(v RequestHeaders) OptRequestHeaders {
	return OptRequestHeaders{
		Value: v,
		Set:   true,
	}
}

// OptRequestHeaders is optional RequestHeaders.
type OptRequestHeaders struct {
	Value RequestHeaders
	Set   bool
}

// IsSet returns true if OptRequestHeaders was set.
func (o OptRequestHeaders) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequestHeaders) Reset() {
	var v RequestHeaders
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequestHeaders) SetTo(v RequestHeaders) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequestHeaders) Get() (v RequestHeaders, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequestHeaders) Or(d RequestHeaders) RequestHeaders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSdkInfo returns new OptSdkInfo with value set to v.
func NewOptSdkInfo(v SdkInfo) OptSdkInfo {
	return OptSdkInfo{
		Value: v,
		Set:   true,
	}
}

// OptSdkInfo is optional SdkInfo.
type OptSdkInfo struct {
	Value SdkInfo
	Set   bool
}

// IsSet returns true if OptSdkInfo was set.
func (o OptSdkInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSdkInfo) Reset() {
	var v SdkInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSdkInfo) SetTo(v SdkInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSdkInfo) Get() (v SdkInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSdkInfo) Or(d SdkInfo) SdkInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSignal returns new OptSignal with value set to v.
func NewOptSignal(v Signal) OptSignal {
	return OptSignal{
		Value: v,
		Set:   true,
	}
}

// OptSignal is optional Signal.
type OptSignal struct {
	Value Signal
	Set   bool
}

// IsSet returns true if OptSignal was set.
func (o OptSignal) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSignal) Reset() {
	var v Signal
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSignal) SetTo(v Signal) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSignal) Get() (v Signal, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSignal) Or(d Signal) Signal {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpanData returns new OptSpanData with value set to v.
func NewOptSpanData(v SpanData) OptSpanData {
	return OptSpanData{
		Value: v,
		Set:   true,
	}
}

// OptSpanData is optional SpanData.
type OptSpanData struct {
	Value SpanData
	Set   bool
}

// IsSet returns true if OptSpanData was set.
func (o OptSpanData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpanData) Reset() {
	var v SpanData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpanData) SetTo(v SpanData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpanData) Get() (v SpanData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpanData) Or(d SpanData) SpanData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpanID returns new OptSpanID with value set to v.
func NewOptSpanID(v SpanID) OptSpanID {
	return OptSpanID{
		Value: v,
		Set:   true,
	}
}

// OptSpanID is optional SpanID.
type OptSpanID struct {
	Value SpanID
	Set   bool
}

// IsSet returns true if OptSpanID was set.
func (o OptSpanID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpanID) Reset() {
	var v SpanID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpanID) SetTo(v SpanID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpanID) Get() (v SpanID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpanID) Or(d SpanID) SpanID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpanTags returns new OptSpanTags with value set to v.
func NewOptSpanTags(v SpanTags) OptSpanTags {
	return OptSpanTags{
		Value: v,
		Set:   true,
	}
}

// OptSpanTags is optional SpanTags.
type OptSpanTags struct {
	Value SpanTags
	Set   bool
}

// IsSet returns true if OptSpanTags was set.
func (o OptSpanTags) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpanTags) Reset() {
	var v SpanTags
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpanTags) SetTo(v SpanTags) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpanTags) Get() (v SpanTags, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpanTags) Or(d SpanTags) SpanTags {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStacktrace returns new OptStacktrace with value set to v.
func NewOptStacktrace(v Stacktrace) OptStacktrace {
	return OptStacktrace{
		Value: v,
		Set:   true,
	}
}

// OptStacktrace is optional Stacktrace.
type OptStacktrace struct {
	Value Stacktrace
	Set   bool
}

// IsSet returns true if OptStacktrace was set.
func (o OptStacktrace) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStacktrace) Reset() {
	var v Stacktrace
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStacktrace) SetTo(v Stacktrace) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStacktrace) Get() (v Stacktrace, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStacktrace) Or(d Stacktrace) Stacktrace {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStacktraceRegisters returns new OptStacktraceRegisters with value set to v.
func NewOptStacktraceRegisters(v StacktraceRegisters) OptStacktraceRegisters {
	return OptStacktraceRegisters{
		Value: v,
		Set:   true,
	}
}

// OptStacktraceRegisters is optional StacktraceRegisters.
type OptStacktraceRegisters struct {
	Value StacktraceRegisters
	Set   bool
}

// IsSet returns true if OptStacktraceRegisters was set.
func (o OptStacktraceRegisters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStacktraceRegisters) Reset() {
	var v StacktraceRegisters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStacktraceRegisters) SetTo(v StacktraceRegisters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStacktraceRegisters) Get() (v StacktraceRegisters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStacktraceRegisters) Or(d StacktraceRegisters) StacktraceRegisters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptThreadHeldLocks returns new OptThreadHeldLocks with value set to v.
func NewOptThreadHeldLocks(v ThreadHeldLocks) OptThreadHeldLocks {
	return OptThreadHeldLocks{
		Value: v,
		Set:   true,
	}
}

// OptThreadHeldLocks is optional ThreadHeldLocks.
type OptThreadHeldLocks struct {
	Value ThreadHeldLocks
	Set   bool
}

// IsSet returns true if OptThreadHeldLocks was set.
func (o OptThreadHeldLocks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptThreadHeldLocks) Reset() {
	var v ThreadHeldLocks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptThreadHeldLocks) SetTo(v ThreadHeldLocks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptThreadHeldLocks) Get() (v ThreadHeldLocks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptThreadHeldLocks) Or(d ThreadHeldLocks) ThreadHeldLocks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTimestamp returns new OptTimestamp with value set to v.
func NewOptTimestamp(v Timestamp) OptTimestamp {
	return OptTimestamp{
		Value: v,
		Set:   true,
	}
}

// OptTimestamp is optional Timestamp.
type OptTimestamp struct {
	Value Timestamp
	Set   bool
}

// IsSet returns true if OptTimestamp was set.
func (o OptTimestamp) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTimestamp) Reset() {
	var v Timestamp
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTimestamp) SetTo(v Timestamp) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTimestamp) Get() (v Timestamp, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTimestamp) Or(d Timestamp) Timestamp {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransactionInfo returns new OptTransactionInfo with value set to v.
func NewOptTransactionInfo(v TransactionInfo) OptTransactionInfo {
	return OptTransactionInfo{
		Value: v,
		Set:   true,
	}
}

// OptTransactionInfo is optional TransactionInfo.
type OptTransactionInfo struct {
	Value TransactionInfo
	Set   bool
}

// IsSet returns true if OptTransactionInfo was set.
func (o OptTransactionInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransactionInfo) Reset() {
	var v TransactionInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransactionInfo) SetTo(v TransactionInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransactionInfo) Get() (v TransactionInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransactionInfo) Or(d TransactionInfo) TransactionInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUser returns new OptUser with value set to v.
func NewOptUser(v User) OptUser {
	return OptUser{
		Value: v,
		Set:   true,
	}
}

// OptUser is optional User.
type OptUser struct {
	Value User
	Set   bool
}

// IsSet returns true if OptUser was set.
func (o OptUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUser) Reset() {
	var v User
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUser) SetTo(v User) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUser) Get() (v User, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUser) Or(d User) User {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Request contains information on a HTTP request related to the event.
// See [this](https://develop.sentry.dev/sdk/event-payloads/request/).
// Ref: #/components/schemas/Request
type Request struct {
	URL         OptString         `json:"url"`
	Method      OptString         `json:"method"`
	Data        OptString         `json:"data"`
	QueryString OptString         `json:"query_string"`
	Cookies     OptString         `json:"cookies"`
	Headers     OptRequestHeaders `json:"headers"`
	Env         OptRequestEnv     `json:"env"`
}

// GetURL returns the value of URL.
func (s *Request) GetURL() OptString {
	return s.URL
}

// GetMethod returns the value of Method.
func (s *Request) GetMethod() OptString {
	return s.Method
}

// GetData returns the value of Data.
func (s *Request) GetData() OptString {
	return s.Data
}

// GetQueryString returns the value of QueryString.
func (s *Request) GetQueryString() OptString {
	return s.QueryString
}

// GetCookies returns the value of Cookies.
func (s *Request) GetCookies() OptString {
	return s.Cookies
}

// GetHeaders returns the value of Headers.
func (s *Request) GetHeaders() OptRequestHeaders {
	return s.Headers
}

// GetEnv returns the value of Env.
func (s *Request) GetEnv() OptRequestEnv {
	return s.Env
}

// SetURL sets the value of URL.
func (s *Request) SetURL(val OptString) {
	s.URL = val
}

// SetMethod sets the value of Method.
func (s *Request) SetMethod(val OptString) {
	s.Method = val
}

// SetData sets the value of Data.
func (s *Request) SetData(val OptString) {
	s.Data = val
}

// SetQueryString sets the value of QueryString.
func (s *Request) SetQueryString(val OptString) {
	s.QueryString = val
}

// SetCookies sets the value of Cookies.
func (s *Request) SetCookies(val OptString) {
	s.Cookies = val
}

// SetHeaders sets the value of Headers.
func (s *Request) SetHeaders(val OptRequestHeaders) {
	s.Headers = val
}

// SetEnv sets the value of Env.
func (s *Request) SetEnv(val OptRequestEnv) {
	s.Env = val
}

type RequestEnv map[string]string

func (s *RequestEnv) init() RequestEnv {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type RequestHeaders map[string]string

func (s *RequestHeaders) init() RequestHeaders {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// SdkInfo contains all metadata about about the SDK being used.
// See [this](https://develop.sentry.dev/sdk/event-payloads/sdk/).
// Ref: #/components/schemas/SdkInfo
type SdkInfo struct {
	Name         OptString    `json:"name"`
	Version      string       `json:"version"`
	Integrations []string     `json:"integrations"`
	Packages     []SdkPackage `json:"packages"`
}

// GetName returns the value of Name.
func (s *SdkInfo) GetName() OptString {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *SdkInfo) GetVersion() string {
	return s.Version
}

// GetIntegrations returns the value of Integrations.
func (s *SdkInfo) GetIntegrations() []string {
	return s.Integrations
}

// GetPackages returns the value of Packages.
func (s *SdkInfo) GetPackages() []SdkPackage {
	return s.Packages
}

// SetName sets the value of Name.
func (s *SdkInfo) SetName(val OptString) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *SdkInfo) SetVersion(val string) {
	s.Version = val
}

// SetIntegrations sets the value of Integrations.
func (s *SdkInfo) SetIntegrations(val []string) {
	s.Integrations = val
}

// SetPackages sets the value of Packages.
func (s *SdkInfo) SetPackages(val []SdkPackage) {
	s.Packages = val
}

// SdkPackage describes a package that was installed.
// Ref: #/components/schemas/SdkPackage
type SdkPackage struct {
	Name    OptString `json:"name"`
	Version OptString `json:"version"`
}

// GetName returns the value of Name.
func (s *SdkPackage) GetName() OptString {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *SdkPackage) GetVersion() OptString {
	return s.Version
}

// SetName sets the value of Name.
func (s *SdkPackage) SetName(val OptString) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *SdkPackage) SetVersion(val OptString) {
	s.Version = val
}

// See [this](https://develop.sentry.dev/sdk/event-payloads/exception/#signal).
// Ref: #/components/schemas/Signal
type Signal struct {
	Number   int       `json:"number"`
	Code     OptInt    `json:"code"`
	Name     OptString `json:"name"`
	CodeName OptString `json:"code_name"`
}

// GetNumber returns the value of Number.
func (s *Signal) GetNumber() int {
	return s.Number
}

// GetCode returns the value of Code.
func (s *Signal) GetCode() OptInt {
	return s.Code
}

// GetName returns the value of Name.
func (s *Signal) GetName() OptString {
	return s.Name
}

// GetCodeName returns the value of CodeName.
func (s *Signal) GetCodeName() OptString {
	return s.CodeName
}

// SetNumber sets the value of Number.
func (s *Signal) SetNumber(val int) {
	s.Number = val
}

// SetCode sets the value of Code.
func (s *Signal) SetCode(val OptInt) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *Signal) SetName(val OptString) {
	s.Name = val
}

// SetCodeName sets the value of CodeName.
func (s *Signal) SetCodeName(val OptString) {
	s.CodeName = val
}

// See [this](https://develop.sentry.dev/sdk/event-payloads/span).
// Ref: #/components/schemas/Span
type Span struct {
	TraceID        TraceID     `json:"trace_id"`
	SpanID         SpanID      `json:"span_id"`
	ParentSpanID   OptSpanID   `json:"parent_span_id"`
	Name           OptString   `json:"name"`
	Op             OptString   `json:"op"`
	Description    OptString   `json:"description"`
	Status         OptString   `json:"status"`
	Tags           OptSpanTags `json:"tags"`
	StartTimestamp Timestamp   `json:"start_timestamp"`
	Timestamp      Timestamp   `json:"timestamp"`
	Data           OptSpanData `json:"data"`
}

// GetTraceID returns the value of TraceID.
func (s *Span) GetTraceID() TraceID {
	return s.TraceID
}

// GetSpanID returns the value of SpanID.
func (s *Span) GetSpanID() SpanID {
	return s.SpanID
}

// GetParentSpanID returns the value of ParentSpanID.
func (s *Span) GetParentSpanID() OptSpanID {
	return s.ParentSpanID
}

// GetName returns the value of Name.
func (s *Span) GetName() OptString {
	return s.Name
}

// GetOp returns the value of Op.
func (s *Span) GetOp() OptString {
	return s.Op
}

// GetDescription returns the value of Description.
func (s *Span) GetDescription() OptString {
	return s.Description
}

// GetStatus returns the value of Status.
func (s *Span) GetStatus() OptString {
	return s.Status
}

// GetTags returns the value of Tags.
func (s *Span) GetTags() OptSpanTags {
	return s.Tags
}

// GetStartTimestamp returns the value of StartTimestamp.
func (s *Span) GetStartTimestamp() Timestamp {
	return s.StartTimestamp
}

// GetTimestamp returns the value of Timestamp.
func (s *Span) GetTimestamp() Timestamp {
	return s.Timestamp
}

// GetData returns the value of Data.
func (s *Span) GetData() OptSpanData {
	return s.Data
}

// SetTraceID sets the value of TraceID.
func (s *Span) SetTraceID(val TraceID) {
	s.TraceID = val
}

// SetSpanID sets the value of SpanID.
func (s *Span) SetSpanID(val SpanID) {
	s.SpanID = val
}

// SetParentSpanID sets the value of ParentSpanID.
func (s *Span) SetParentSpanID(val OptSpanID) {
	s.ParentSpanID = val
}

// SetName sets the value of Name.
func (s *Span) SetName(val OptString) {
	s.Name = val
}

// SetOp sets the value of Op.
func (s *Span) SetOp(val OptString) {
	s.Op = val
}

// SetDescription sets the value of Description.
func (s *Span) SetDescription(val OptString) {
	s.Description = val
}

// SetStatus sets the value of Status.
func (s *Span) SetStatus(val OptString) {
	s.Status = val
}

// SetTags sets the value of Tags.
func (s *Span) SetTags(val OptSpanTags) {
	s.Tags = val
}

// SetStartTimestamp sets the value of StartTimestamp.
func (s *Span) SetStartTimestamp(val Timestamp) {
	s.StartTimestamp = val
}

// SetTimestamp sets the value of Timestamp.
func (s *Span) SetTimestamp(val Timestamp) {
	s.Timestamp = val
}

// SetData sets the value of Data.
func (s *Span) SetData(val OptSpanData) {
	s.Data = val
}

type SpanData map[string]jx.Raw

func (s *SpanData) init() SpanData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type SpanID string

type SpanTags map[string]string

func (s *SpanTags) init() SpanTags {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/Stacktrace
type Stacktrace struct {
	Frames    []Frame                `json:"frames"`
	Registers OptStacktraceRegisters `json:"registers"`
}

// GetFrames returns the value of Frames.
func (s *Stacktrace) GetFrames() []Frame {
	return s.Frames
}

// GetRegisters returns the value of Registers.
func (s *Stacktrace) GetRegisters() OptStacktraceRegisters {
	return s.Registers
}

// SetFrames sets the value of Frames.
func (s *Stacktrace) SetFrames(val []Frame) {
	s.Frames = val
}

// SetRegisters sets the value of Registers.
func (s *Stacktrace) SetRegisters(val OptStacktraceRegisters) {
	s.Registers = val
}

type StacktraceRegisters map[string]string

func (s *StacktraceRegisters) init() StacktraceRegisters {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Thread specifies threads that were running at the time of an event.
// See [this](https://develop.sentry.dev/sdk/event-payloads/threads/).
// Ref: #/components/schemas/Thread
type Thread struct {
	ID        string             `json:"id"`
	Crashed   OptBool            `json:"crashed"`
	Current   OptBool            `json:"current"`
	Main      OptBool            `json:"main"`
	Name      OptString          `json:"name"`
	State     OptString          `json:"state"`
	HeldLocks OptThreadHeldLocks `json:"held_locks"`
}

// GetID returns the value of ID.
func (s *Thread) GetID() string {
	return s.ID
}

// GetCrashed returns the value of Crashed.
func (s *Thread) GetCrashed() OptBool {
	return s.Crashed
}

// GetCurrent returns the value of Current.
func (s *Thread) GetCurrent() OptBool {
	return s.Current
}

// GetMain returns the value of Main.
func (s *Thread) GetMain() OptBool {
	return s.Main
}

// GetName returns the value of Name.
func (s *Thread) GetName() OptString {
	return s.Name
}

// GetState returns the value of State.
func (s *Thread) GetState() OptString {
	return s.State
}

// GetHeldLocks returns the value of HeldLocks.
func (s *Thread) GetHeldLocks() OptThreadHeldLocks {
	return s.HeldLocks
}

// SetID sets the value of ID.
func (s *Thread) SetID(val string) {
	s.ID = val
}

// SetCrashed sets the value of Crashed.
func (s *Thread) SetCrashed(val OptBool) {
	s.Crashed = val
}

// SetCurrent sets the value of Current.
func (s *Thread) SetCurrent(val OptBool) {
	s.Current = val
}

// SetMain sets the value of Main.
func (s *Thread) SetMain(val OptBool) {
	s.Main = val
}

// SetName sets the value of Name.
func (s *Thread) SetName(val OptString) {
	s.Name = val
}

// SetState sets the value of State.
func (s *Thread) SetState(val OptString) {
	s.State = val
}

// SetHeldLocks sets the value of HeldLocks.
func (s *Thread) SetHeldLocks(val OptThreadHeldLocks) {
	s.HeldLocks = val
}

type ThreadHeldLocks map[string]jx.Raw

func (s *ThreadHeldLocks) init() ThreadHeldLocks {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type Timestamp time.Time

type TraceID string

// Ref: #/components/schemas/TransactionInfo
type TransactionInfo struct {
	Source TransactionSource `json:"source"`
}

// GetSource returns the value of Source.
func (s *TransactionInfo) GetSource() TransactionSource {
	return s.Source
}

// SetSource sets the value of Source.
func (s *TransactionInfo) SetSource(val TransactionSource) {
	s.Source = val
}

type TransactionSource string

// User describes the user associated with an Event. If this is used, at least
// an ID or an IP address should be provided.
// See [this](https://develop.sentry.dev/sdk/event-payloads/user/).
// Ref: #/components/schemas/User
type User struct {
	ID              OptString `json:"id"`
	Email           OptString `json:"email"`
	IPAddress       OptString `json:"ip_address"`
	Username        OptString `json:"username"`
	Name            OptString `json:"name"`
	Segment         OptString `json:"segment"`
	AdditionalProps UserAdditional
}

// GetID returns the value of ID.
func (s *User) GetID() OptString {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptString {
	return s.Email
}

// GetIPAddress returns the value of IPAddress.
func (s *User) GetIPAddress() OptString {
	return s.IPAddress
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() OptString {
	return s.Username
}

// GetName returns the value of Name.
func (s *User) GetName() OptString {
	return s.Name
}

// GetSegment returns the value of Segment.
func (s *User) GetSegment() OptString {
	return s.Segment
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *User) GetAdditionalProps() UserAdditional {
	return s.AdditionalProps
}

// SetID sets the value of ID.
func (s *User) SetID(val OptString) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetIPAddress sets the value of IPAddress.
func (s *User) SetIPAddress(val OptString) {
	s.IPAddress = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val OptString) {
	s.Username = val
}

// SetName sets the value of Name.
func (s *User) SetName(val OptString) {
	s.Name = val
}

// SetSegment sets the value of Segment.
func (s *User) SetSegment(val OptString) {
	s.Segment = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *User) SetAdditionalProps(val UserAdditional) {
	s.AdditionalProps = val
}

type UserAdditional map[string]jx.Raw

func (s *UserAdditional) init() UserAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}
