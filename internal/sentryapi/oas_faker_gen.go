// Code generated by ogen, DO NOT EDIT.

package sentryapi

import (
	"fmt"
	"time"

	"github.com/go-faster/jx"
)

// SetFake set fake values.
func (s *Breadcrumb) SetFake() {
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Category.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
	{
		{
			s.Level.SetFake()
		}
	}
	{
		{
			s.Timestamp.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BreadcrumbData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Context) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *DebugImage) SetFake() {
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.ImageAddr.SetFake()
		}
	}
	{
		{
			s.ImageSize.SetFake()
		}
	}
	{
		{
			s.DebugID.SetFake()
		}
	}
	{
		{
			s.DebugFile.SetFake()
		}
	}
	{
		{
			s.CodeID.SetFake()
		}
	}
	{
		{
			s.CodeFile.SetFake()
		}
	}
	{
		{
			s.ImageVmaddr.SetFake()
		}
	}
	{
		{
			s.Arch.SetFake()
		}
	}
	{
		{
			s.UUID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DebugMeta) SetFake() {
	{
		{
			s.SdkInfo.SetFake()
		}
	}
	{
		{
			s.Images.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DebugMetaSdkInfo) SetFake() {
	{
		{
			s.SdkName.SetFake()
		}
	}
	{
		{
			s.VersionMajor.SetFake()
		}
	}
	{
		{
			s.VersionMinor.SetFake()
		}
	}
	{
		{
			s.VersionPatchlevel.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Errno) SetFake() {
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Error) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = Error(unwrapped)
}

// SetFake set fake values.
func (s *Event) SetFake() {
	{
		{
			s.Breadcrumbs = nil
			for i := 0; i < 0; i++ {
				var elem Breadcrumb
				{
					elem.SetFake()
				}
				s.Breadcrumbs = append(s.Breadcrumbs, elem)
			}
		}
	}
	{
		{
			s.Contexts.SetFake()
		}
	}
	{
		{
			s.Dist.SetFake()
		}
	}
	{
		{
			s.Environment.SetFake()
		}
	}
	{
		{
			s.EventID.SetFake()
		}
	}
	{
		{
			s.Extra.SetFake()
		}
	}
	{
		{
			s.Fingerprint = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Fingerprint = append(s.Fingerprint, elem)
			}
		}
	}
	{
		{
			s.Level.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.Platform = "string"
		}
	}
	{
		{
			s.Release.SetFake()
		}
	}
	{
		{
			s.Sdk.SetFake()
		}
	}
	{
		{
			s.ServerName.SetFake()
		}
	}
	{
		{
			s.Threads = nil
			for i := 0; i < 0; i++ {
				var elem Thread
				{
					elem.SetFake()
				}
				s.Threads = append(s.Threads, elem)
			}
		}
	}
	{
		{
			s.Tags.SetFake()
		}
	}
	{
		{
			s.Timestamp.SetFake()
		}
	}
	{
		{
			s.Transaction.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Logger.SetFake()
		}
	}
	{
		{
			s.Modules.SetFake()
		}
	}
	{
		{
			s.Request.SetFake()
		}
	}
	{
		{
			s.Exception = nil
			for i := 0; i < 0; i++ {
				var elem Exception
				{
					elem.SetFake()
				}
				s.Exception = append(s.Exception, elem)
			}
		}
	}
	{
		{
			s.DebugMeta.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.StartTimestamp.SetFake()
		}
	}
	{
		{
			s.Spans = nil
			for i := 0; i < 0; i++ {
				var elem Span
				{
					elem.SetFake()
				}
				s.Spans = append(s.Spans, elem)
			}
		}
	}
	{
		{
			s.TransactionInfo.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *EventContexts) SetFake() {
	var (
		elem Context
		m    map[string]Context = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *EventExtra) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *EventID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = EventID(unwrapped)
}

// SetFake set fake values.
func (s *EventModules) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *EventTags) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Exception) SetFake() {
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.Value = "string"
		}
	}
	{
		{
			s.Module.SetFake()
		}
	}
	{
		{
			s.ThreadID.SetFake()
		}
	}
	{
		{
			s.Stacktrace.SetFake()
		}
	}
	{
		{
			s.Mechanism.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Frame) SetFake() {
	{
		{
			s.Function.SetFake()
		}
	}
	{
		{
			s.Symbol.SetFake()
		}
	}
	{
		{
			s.Module.SetFake()
		}
	}
	{
		{
			s.Filename.SetFake()
		}
	}
	{
		{
			s.AbsPath.SetFake()
		}
	}
	{
		{
			s.Lineno.SetFake()
		}
	}
	{
		{
			s.Colno.SetFake()
		}
	}
	{
		{
			s.PreContext = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.PreContext = append(s.PreContext, elem)
			}
		}
	}
	{
		{
			s.ContextLine.SetFake()
		}
	}
	{
		{
			s.PostContext = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.PostContext = append(s.PostContext, elem)
			}
		}
	}
	{
		{
			s.InApp.SetFake()
		}
	}
	{
		{
			s.Vars.SetFake()
		}
	}
	{
		{
			s.Package.SetFake()
		}
	}
	{
		{
			s.InstructionAddr.SetFake()
		}
	}
	{
		{
			s.AddrMode.SetFake()
		}
	}
	{
		{
			s.SymbolAddr.SetFake()
		}
	}
	{
		{
			s.ImageAddr.SetFake()
		}
	}
	{
		{
			s.Platform.SetFake()
		}
	}
	{
		{
			s.StackStart.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FrameVars) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Level) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = Level(unwrapped)
}

// SetFake set fake values.
func (s *MachException) SetFake() {
	{
		{
			s.Exception = int(0)
		}
	}
	{
		{
			s.Code = int(0)
		}
	}
	{
		{
			s.Subcode = int(0)
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Mechanism) SetFake() {
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.HelpLink.SetFake()
		}
	}
	{
		{
			s.Handled.SetFake()
		}
	}
	{
		{
			s.Synthetic.SetFake()
		}
	}
	{
		{
			s.Meta.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MechanismData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *MechanismMeta) SetFake() {
	{
		{
			s.Signal.SetFake()
		}
	}
	{
		{
			s.MachException.SetFake()
		}
	}
	{
		{
			s.NsError.SetFake()
		}
	}
	{
		{
			s.Errno.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NSError) SetFake() {
	{
		{
			s.Code = int(0)
		}
	}
	{
		{
			s.Domain.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OptBool) SetFake() {
	var elem bool
	{
		elem = true
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBreadcrumbData) SetFake() {
	var elem BreadcrumbData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDebugImage) SetFake() {
	var elem DebugImage
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDebugMeta) SetFake() {
	var elem DebugMeta
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDebugMetaSdkInfo) SetFake() {
	var elem DebugMetaSdkInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptErrno) SetFake() {
	var elem Errno
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptEventContexts) SetFake() {
	var elem EventContexts
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptEventExtra) SetFake() {
	var elem EventExtra
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptEventModules) SetFake() {
	var elem EventModules
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptEventTags) SetFake() {
	var elem EventTags
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFrameVars) SetFake() {
	var elem FrameVars
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt) SetFake() {
	var elem int
	{
		elem = int(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptLevel) SetFake() {
	var elem Level
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMachException) SetFake() {
	var elem MachException
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMechanism) SetFake() {
	var elem Mechanism
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMechanismData) SetFake() {
	var elem MechanismData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMechanismMeta) SetFake() {
	var elem MechanismMeta
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNSError) SetFake() {
	var elem NSError
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRequest) SetFake() {
	var elem Request
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRequestEnv) SetFake() {
	var elem RequestEnv
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRequestHeaders) SetFake() {
	var elem RequestHeaders
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSdkInfo) SetFake() {
	var elem SdkInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSignal) SetFake() {
	var elem Signal
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSpanData) SetFake() {
	var elem SpanData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSpanID) SetFake() {
	var elem SpanID
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSpanTags) SetFake() {
	var elem SpanTags
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStacktrace) SetFake() {
	var elem Stacktrace
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStacktraceRegisters) SetFake() {
	var elem StacktraceRegisters
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptString) SetFake() {
	var elem string
	{
		elem = "string"
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptThreadHeldLocks) SetFake() {
	var elem ThreadHeldLocks
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTimestamp) SetFake() {
	var elem Timestamp
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTransactionInfo) SetFake() {
	var elem TransactionInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUser) SetFake() {
	var elem User
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *Request) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Method.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
	{
		{
			s.QueryString.SetFake()
		}
	}
	{
		{
			s.Cookies.SetFake()
		}
	}
	{
		{
			s.Headers.SetFake()
		}
	}
	{
		{
			s.Env.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RequestEnv) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *RequestHeaders) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SdkInfo) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Version = "string"
		}
	}
	{
		{
			s.Integrations = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Integrations = append(s.Integrations, elem)
			}
		}
	}
	{
		{
			s.Packages = nil
			for i := 0; i < 0; i++ {
				var elem SdkPackage
				{
					elem.SetFake()
				}
				s.Packages = append(s.Packages, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SdkPackage) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Version.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Signal) SetFake() {
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.CodeName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Span) SetFake() {
	{
		{
			s.TraceID.SetFake()
		}
	}
	{
		{
			s.SpanID.SetFake()
		}
	}
	{
		{
			s.ParentSpanID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Op.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.Tags.SetFake()
		}
	}
	{
		{
			s.StartTimestamp.SetFake()
		}
	}
	{
		{
			s.Timestamp.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SpanData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *SpanID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = SpanID(unwrapped)
}

// SetFake set fake values.
func (s *SpanTags) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Stacktrace) SetFake() {
	{
		{
			s.Frames = nil
			for i := 0; i < 0; i++ {
				var elem Frame
				{
					elem.SetFake()
				}
				s.Frames = append(s.Frames, elem)
			}
		}
	}
	{
		{
			s.Registers.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *StacktraceRegisters) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Thread) SetFake() {
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.Crashed.SetFake()
		}
	}
	{
		{
			s.Current.SetFake()
		}
	}
	{
		{
			s.Main.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.HeldLocks.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ThreadHeldLocks) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *Timestamp) SetFake() {
	var unwrapped time.Time
	{
		unwrapped = time.Now()
	}
	*s = Timestamp(unwrapped)
}

// SetFake set fake values.
func (s *TraceID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = TraceID(unwrapped)
}

// SetFake set fake values.
func (s *TransactionInfo) SetFake() {
	{
		{
			s.Source.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TransactionSource) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = TransactionSource(unwrapped)
}

// SetFake set fake values.
func (s *User) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.IPAddress.SetFake()
		}
	}
	{
		{
			s.Username.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Segment.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *UserAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}
