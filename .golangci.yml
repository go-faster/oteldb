linters-settings:
  govet:
    check-shadowing: true
  gocyclo:
    min-complexity: 15
  maligned:
    suggest-new: true
  dupl:
    threshold: 120
  goconst:
    min-len: 2
    min-occurrences: 3
  misspell:
    locale: US
  lll:
    line-length: 140
  goimports:
    local-prefixes: github.com/go-faster/oteldb
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - hugeParam
      - rangeValCopy
      - exitAfterDefer
      - whyNoLint
      - singleCaseSwitch
      - commentedOutCode
      - appendAssign
      - unnecessaryBlock
      - redundantSprint
      - octalLiteral
      - typeDefFirst
      - unnamedResult

linters:
  disable-all: true
  enable:
    - dogsled
    - errcheck
    - goconst
    - gocritic # go1.18
    - gofmt
    - goimports
    - revive
    - gosec
    - gosimple
    - govet
    - ineffassign
    - misspell
    - nakedret
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - whitespace

  # Do not enable:
  # - wsl       (too opinionated about newlines)
  # - godox     (todos are OK)
  # - bodyclose (false positives on helper functions)
  # - prealloc  (not worth it in scope of this project)
  # - maligned  (same as prealloc)
  # - funlen    (gocyclo is enough)
  # - gochecknoglobals (we know when it is ok to use globals)

issues:
  exclude-use-default: false
  exclude-rules:
    # Disable linters that are annoying in tests.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - funlen
        - goconst
        - gocognit
        - scopelint
        - lll
    - path: _test\.go
      linters:
        - revive
      text: unused-parameter

    # Allow unused context.Context
    - linters:
        - revive
      text: unused-parameter
      source: .+\s+context.Context

    - path: _test\.go
      text: "Combine"
      linters: [gocritic]

    # Check that equal to self is true
    - linters: [gocritic]
      source: "(assert|require).+Equal"
      text: "dupArg"
      path: _test\.go

    # Ignore shadowing of err.
    - linters: [govet]
      text: 'declaration of "(err|ctx|log|lg|c)"'

    # Probably some broken linter for generics?
    - linters: [revive]
      text: 'receiver-naming: receiver name \S+ should be consistent with previous receiver name \S+ for invalid-type'

    # Ignore linters in main packages.
    - path: main\.go
      linters: [goconst, funlen, gocognit, gocyclo]

    - path: main\.go
      linters: [gosec]
      text: "G307"

    - source: 'func Fuzz.+\(f \*testing\.F\)'
      linters: [stylecheck]
      text: "ST1003" # underscores lol

    - path: (internal|cmd)
      linters: [revive, stylecheck]
      text: "comment"

    - path: "internal/promcompliance"
      linters: [revive]
      text: "exported:"

    - path: "internal/promcompliance"
      linters: [gocritic]
      text: "ifElseChain:"

    - linters: [revive]
      text: "comment on exported const .+ should be of the form"
    - linters: [revive]
      text: "exported const .+ should have comment"

    # It's okay for ytlocal to write files and exec binaries.
    - path: (cmd|internal)/ytlocal
      linters: [gosec]
      text: "G(306|301|204)"

    # False positive.
    - linters: [govet]
      source: func.+Seek\(.+int64\).+chunkenc\.ValueType
      text: "method Seek"

    # Not gonna use const, does not make any sense.
    - linters: [goconst]
      text: "(Int64|int)"
    - path: "internal/logparser"
      linters: [goconst]
      text: "(trace|span)_?[Ii][Dd]"

    - path: "internal/prompb"
      linters: [stylecheck]
