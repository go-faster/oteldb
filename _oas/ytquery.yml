openapi: 3.0.3
info:
  title: YTSaurus HTTP Query API
  version: 1.0
servers:
  - url: "http://localhost:8000"
paths:
  /api/v4/start_query:
    post:
      operationId: startQuery
      description: Start a new query.
      parameters:
        - name: query
          in: query
          description: "Query."
          schema:
            type: string
          required: true
        - name: engine
          in: query
          description: "Query engine to run."
          schema:
            $ref: "#/components/schemas/Engine"
          required: true
        - $ref: "#/components/parameters/Stage"
      responses:
        200:
          $ref: "#/components/responses/StartedQuery"
        default:
          $ref: "#/components/responses/Error"
  /api/v4/abort_query:
    post:
      operationId: abortQuery
      description: Abort running query.
      parameters:
        - name: query_id
          in: query
          description: "Query ID to get."
          schema:
            $ref: "#/components/schemas/QueryID"
          required: true
        - $ref: "#/components/parameters/Stage"
      responses:
        200:
          $ref: "#/components/responses/AbortedQuery"
        default:
          $ref: "#/components/responses/Error"
  /api/v4/read_query_result:
    post:
      operationId: readQueryResult
      description: Read query result.
      parameters:
        - name: query_id
          in: query
          description: "Query ID to get result."
          schema:
            $ref: "#/components/schemas/QueryID"
          required: true
        - name: result_index
          in: query
          description: "Index of a result to read, defaults to 0."
          schema:
            type: integer
        - name: output_format
          in: query
          description: "Output format."
          schema:
            $ref: "#/components/schemas/OutputFormat"
          required: true
        - $ref: "#/components/parameters/Stage"
      responses:
        200:
          $ref: "#/components/responses/QueryResult"
        default:
          $ref: "#/components/responses/Error"
  /api/v4/get_query:
    post:
      operationId: getQuery
      description: Gets query status.
      parameters:
        - name: query_id
          in: query
          description: "Query ID to get."
          schema:
            $ref: "#/components/schemas/QueryID"
          required: true
        - $ref: "#/components/parameters/Stage"
      responses:
        200:
          $ref: "#/components/responses/QueryStatus"
        default:
          $ref: "#/components/responses/Error"
components:
  responses:
    StartedQuery:
      description: Started query.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/StartedQuery"
    AbortedQuery:
      description: Aborted query.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/AbortedQuery"
    QueryResult:
      description: Raw query result.
      content:
        "*/*":
          type: string
          format: binary
    QueryStatus:
      description: Query status.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/QueryStatus"
    Error:
      description: Error while processing request
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/Error"
  parameters:
    Stage:
      name: stage
      in: query
      description: "Stage"
      schema:
        type: string
  schemas:
    StartedQuery:
      type: object
      required: [query_id]
      properties:
        query_id:
          $ref: "#/components/schemas/QueryID"
    AbortedQuery:
      type: object
    QueryStatus:
      type: object
      description: |
        Note that error is could be present even if query is successful.
        Successful query error code is 0.
      required: [id, engine, start_time, state]
      properties:
        id:
          $ref: "#/components/schemas/QueryID"
        engine:
          $ref: "#/components/schemas/Engine"
        start_time:
          type: string
          format: date-time
        finish_time:
          type: string
          format: date-time
        ping_time:
          type: string
          format: date-time
        settings:
          # TODO(tdakkota): find out actual schema
          type: object
          additionalProperties: {}
        user:
          type: string
        state:
          $ref: "#/components/schemas/OperationState"
        result_count:
          type: integer
        progress:
          # TODO(tdakkota): find out actual schema
          type: object
          additionalProperties: {}
        annotations:
          # TODO(tdakkota): find out actual schema
          type: object
          additionalProperties: {}
        incarnation:
          type: integer
        error:
          $ref: "#/components/schemas/Error"
    OperationState:
      type: string
      enum:
        - running
        - pending
        - completed
        - failed
        - aborted
        - reviving
        - initializing
        - preparing
        - materializing
        - completing
        - aborting
        - failing
    Engine:
      type: string
      enum:
        - yql
        - ql
        - chyt
    OutputFormat:
      type: string
      enum:
        - json
        - yson
        - dsv
        - schemaful_dsv
        - protobuf
    QueryID:
      type: string
    Attributes:
      type: object
      properties:
        host:
          type: string
        pid:
          type: integer
          format: uint64
        tid:
          type: integer
          format: uint64
        thread:
          type: string
        fid:
          type: integer
          format: uint64
        datetime:
          type: string
          format: date-time
        trace_id:
          type: string
        span_id:
          type: integer
          format: uint64
        connection_id:
          type: string
        realm_id:
          type: string
        method:
          type: string
        request_id:
          type: string
        timeout:
          type: integer
        address:
          type: string
        service:
          type: string
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: integer
        message:
          type: string
        attributes:
          $ref: "#/components/schemas/Attributes"
        inner_errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    YTToken:
      type: apiKey
      in: header
      name: Authorization
security:
  - YTToken: []
  - {} # Do not require token.
