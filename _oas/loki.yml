openapi: 3.0.3
info:
  title: Grafana Loki API
  version: 2.8.2
externalDocs:
  description: Loki API reference
  url: https://grafana.com/docs/loki/latest/api
servers:
  - url: "http://localhost:3100"
paths:
  /loki/api/v1/query:
    get:
      operationId: query
      description: Query
      parameters:
        - $ref: "#/components/parameters/GrafanaUser"
        - name: query
          description: The LogQL query to perform.
          in: query
          required: true
          schema:
            type: string
        - name: limit
          description: |
            The max number of entries to return.
            It defaults to `100`.
            Only applies to query types which produce a stream (log lines) response.
          in: query
          schema:
            type: integer
            maximum: 5000
            minimum: 0
        - name: time
          description: |
            The evaluation time for the query as a nanosecond Unix epoch or another supported format.
            Defaults to now.
          in: query
          schema:
            $ref: "#/components/schemas/LokiTime"
        - name: direction
          description: |
            Determines the sort order of logs.
            Supported values are `forward` or `backward`.
            Defaults to `backward`.
          in: query
          schema:
            $ref: "#/components/schemas/Direction"
      responses:
        "200":
          description: Query response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
        default:
          $ref: "#/components/responses/Error"
  /loki/api/v1/query_range:
    get:
      operationId: queryRange
      description: Query range
      parameters:
        - $ref: "#/components/parameters/GrafanaUser"
        - name: start
          in: query
          schema:
            $ref: "#/components/schemas/LokiTime"
        - name: end
          in: query
          schema:
            $ref: "#/components/schemas/LokiTime"
        - name: since
          description: |
            A `duration` used to calculate `start` relative to `end`.
            If `end` is in the future, `start` is calculated as this duration before now.
            Any value specified for start supersedes this parameter.
          in: query
          schema:
            $ref: "#/components/schemas/PrometheusDuration"
        - name: query
          description: The LogQL query to perform.
          in: query
          required: true
          schema:
            type: string
        - name: step
          description: |
            Query resolution step width in `duration` format or float number of seconds.
            `duration` refers to Prometheus duration strings of the form `[0-9]+[smhdwy]`.
            For example, `5m` refers to a duration of 5 minutes.
            Defaults to a dynamic value based on start and end.
            Only applies to query types which produce a matrix response.
          in: query
          schema:
            $ref: "#/components/schemas/PrometheusDuration"
        - name: limit
          description: |
            The max number of entries to return.
            It defaults to `100`.
            Only applies to query types which produce a stream (log lines) response.
          in: query
          schema:
            type: integer
            maximum: 5000
            minimum: 0
        - name: direction
          description: |
            Determines the sort order of logs.
            Supported values are `forward` or `backward`.
            Defaults to `backward`.
          in: query
          schema:
            $ref: "#/components/schemas/Direction"
      responses:
        "200":
          description: Query response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
        default:
          $ref: "#/components/responses/Error"
  /loki/api/v1/labels:
    get:
      operationId: labels
      description: |
        Get labels.
        Used by Grafana to test connection to Loki.
      parameters:
        - $ref: "#/components/parameters/GrafanaUser"
        - name: start
          description: |
            The start time for the query as a nanosecond Unix epoch.
            Defaults to 6 hours ago.
          in: query
          schema:
            $ref: "#/components/schemas/LokiTime"
        - name: end
          description: |
            The end time for the query as a nanosecond Unix epoch.
            Defaults to now.
          in: query
          schema:
            $ref: "#/components/schemas/LokiTime"
        - name: since
          description: |
            A `duration` used to calculate `start` relative to `end`.
            If `end` is in the future, `start` is calculated as this duration before now.
            Any value specified for start supersedes this parameter.
          in: query
          schema:
            $ref: "#/components/schemas/PrometheusDuration"
      responses:
        "200":
          description: Label names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Labels"
        default:
          $ref: "#/components/responses/Error"
  /loki/api/v1/label/{name}/values:
    get:
      operationId: labelValues
      description: Get values of label
      parameters:
        - $ref: "#/components/parameters/GrafanaUser"
        - name: start
          description: |
            The start time for the query as a nanosecond Unix epoch.
            Defaults to 6 hours ago.
          in: query
          schema:
            $ref: "#/components/schemas/LokiTime"
        - name: end
          description: |
            The end time for the query as a nanosecond Unix epoch.
            Defaults to now.
          in: query
          schema:
            $ref: "#/components/schemas/LokiTime"
        - name: since
          description: |
            A `duration` used to calculate `start` relative to `end`.
            If `end` is in the future, `start` is calculated as this duration before now.
            Any value specified for start supersedes this parameter.
          in: query
          schema:
            $ref: "#/components/schemas/PrometheusDuration"
        - name: query
          description: |
            A set of log stream selector that selects the streams to match and return label values for `{name}`.
          in: query
          schema:
            type: string
        - name: name
          description: Label name.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Label values
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Values"
        default:
          $ref: "#/components/responses/Error"
  /loki/api/v1/series:
    get:
      operationId: series
      description: Get series
      parameters:
        - name: start
          in: query
          schema:
            $ref: "#/components/schemas/LokiTime"
        - name: end
          in: query
          schema:
            $ref: "#/components/schemas/LokiTime"
        - name: since
          description: |
            A `duration` used to calculate `start` relative to `end`.
            If `end` is in the future, `start` is calculated as this duration before now.
            Any value specified for start supersedes this parameter.
          in: query
          schema:
            $ref: "#/components/schemas/PrometheusDuration"
        - name: match
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Keys and values
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maps"
        default:
          $ref: "#/components/responses/Error"
  /loki/api/v1/push:
    post:
      operationId: push
      description: Push data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Push"
          application/x-protobuf:
            schema:
              type: string
              format: binary
      responses:
        "204":
          description: Successful push
        default:
          $ref: "#/components/responses/Error"
components:
  parameters:
    # TODO(ernado): extract to separate file? Same for all datasources
    GrafanaUser:
      name: X-Grafana-User
      in: header
      required: false
      description: "Grafana username that is passed to datasource when making requests from Grafana. Used for authentication and authorization."
      schema:
        type: string
  responses:
    Error:
      description: Error while processing request
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    QueryResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          default: success
        data:
          $ref: "#/components/schemas/QueryResponseData"
    QueryResponseData:
      discriminator:
        propertyName: resultType
        mapping:
          streams: "#/components/schemas/StreamsResult"
          scalar: "#/components/schemas/ScalarResult"
          vector: "#/components/schemas/VectorResult"
          matrix: "#/components/schemas/MatrixResult"
      oneOf:
        - $ref: "#/components/schemas/StreamsResult"
        - $ref: "#/components/schemas/ScalarResult"
        - $ref: "#/components/schemas/VectorResult"
        - $ref: "#/components/schemas/MatrixResult"
    StreamsResult:
      type: object
      required:
        - result
      properties:
        result:
          $ref: "#/components/schemas/Streams"
        stats:
          $ref: "#/components/schemas/Stats"
    Streams:
      type: array
      items:
        $ref: "#/components/schemas/Stream"
    Stream:
      type: object
      required:
        - values
      properties:
        stream:
          $ref: "#/components/schemas/LabelSet"
        values:
          type: array
          items:
            $ref: "#/components/schemas/LogEntry"
    LogEntry:
      type: array
      items:
        - type: string
          format: uint64
          description: stringified nano timestamp
          x-ogen-name: T
        - type: string
          description: value
          x-ogen-name: V
    ScalarResult:
      type: object
      required:
        - result
      properties:
        result:
          $ref: "#/components/schemas/PrometheusSamplePair"
        stats:
          $ref: "#/components/schemas/Stats"
    VectorResult:
      type: object
      required:
        - result
      properties:
        result:
          type: array
          items:
            $ref: "#/components/schemas/Vector"
        stats:
          $ref: "#/components/schemas/Stats"
    Vector:
      type: object
      required:
        - value
      properties:
        metric:
          $ref: "#/components/schemas/LabelSet"
        value:
          $ref: "#/components/schemas/PrometheusSamplePair"
    MatrixResult:
      type: object
      required:
        - result
      properties:
        result:
          $ref: "#/components/schemas/Matrix"
        stats:
          $ref: "#/components/schemas/Stats"
    Matrix:
      type: array
      items:
        $ref: "#/components/schemas/Series"
    Series:
      type: object
      properties:
        metric:
          $ref: "#/components/schemas/LabelSet"
        values:
          type: array
          items:
            $ref: "#/components/schemas/PrometheusSamplePair"
        # TODO(tdakkota): parse histogramas too
    PrometheusSamplePair:
      type: array
      items:
        - type: number
          format: float64
          description: floating point unix timestamp
          x-ogen-name: T
        - type: string
          description: value
          x-ogen-name: V
    Stats:
      type: object
    Direction:
      type: string
      enum:
        - backward
        - forward
    LokiTime:
      type: string
    PrometheusDuration:
      type: string
      pattern: "^[0-9smhdwy]+$"
    Labels:
      type: object
      description: Array of label names
      required:
        - data
        - status
      properties:
        data:
          type: array
          items:
            type: string
        status:
          type: string
          default: success
    Values:
      type: object
      description: Array of strings
      required:
        - data
        - status
      properties:
        data:
          type: array
          items:
            type: string
        status:
          type: string
          default: success
    Maps:
      type: object
      description: Array of maps
      required:
        - data
        - status
      properties:
        data:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        status:
          type: string
          default: success
    Push:
      type: object
      properties:
        streams:
          type: array
          items:
            $ref: "#/components/schemas/Stream"
    PushStream:
      type: object
      properties:
        stream:
          $ref: "#/components/schemas/LabelSet"
        entries:
          type: array
          items:
            $ref: "#/components/schemas/PushStreamEntry"
    PushStreamEntry:
      type: object
      properties:
        line:
          type: string
        ts:
          type: string
          format: unix-nano
    LabelSet:
      type: object
      additionalProperties:
        type: string
    Error:
      type: string
