name: deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_TAG: ghcr.io/${{ github.repository }}
  KUBECTL_VERSION: v1.27.1

jobs:
  oteldb:
    environment: prod
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      KUBECONFIG: /tmp/kubeconfig

    # Skip deploy commit message contains #skip
    if: ${{ !contains(github.event.head_commit.message, '!skip') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21.x"
          cache: false

      - name: Get Go environment
        id: go-env
        run: |
          echo "cache=$(go env GOCACHE)" >> $GITHUB_ENV
          echo "modcache=$(go env GOMODCACHE)" >> $GITHUB_ENV
          echo "goversion=$(go env GOVERSION)" >> $GITHUB_ENV

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.cache }}
            ${{ env.modcache }}
          key: deploy-${{ runner.os }}-go-${{ env.goversion }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            deploy-${{ runner.os }}-go-${{ env.goversion }}

      - name: Docker log in
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get short commit SHA
        id: var
        shell: bash
        run: |
          echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Go build
        env:
          CGO_ENABLED: 0
        run: |
          go build -v ./cmd/oteldb
          go build -v ./cmd/otelproxy
          go build -v ./cmd/otelfaker
          go build -v ./cmd/chotel

      - name: Base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy.Dockerfile
          push: true
          tags: "${{ env.IMAGE_TAG }}:${{ env.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Proxy image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy.proxy.Dockerfile
          push: true
          tags: "${{ env.IMAGE_TAG }}/proxy:${{ env.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Faker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy.faker.Dockerfile
          push: true
          tags: "${{ env.IMAGE_TAG }}/faker:${{ env.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ClickHouse OTEL Exporter Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy.chotel.Dockerfile
          push: true
          tags: "${{ env.IMAGE_TAG }}/chotel:${{ env.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate deployment with SHA version
        run: sed 's/:main/:${{ env.sha }}/g' .k8s/deployment.yml > .k8s/deployment.deploy.yml

      - name: Set up kubectl cache
        uses: actions/cache@v3
        with:
          path: /tmp/kubectl
          key: kubectl-${{ env.KUBECTL_VERSION }}

      - name: Check kubectl
        id: "kubectl"
        uses: andstor/file-existence-action@v2
        with:
          files: /tmp/kubectl

      - name: Download kubectl
        if: steps.kubectl.outputs.files_exists != 'true'
        run: |
          wget -O /tmp/kubectl "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x /tmp/kubectl

      - name: Setup kubeconfig
        env:
          KUBE: ${{ secrets.KUBE }}
        run: .k8s/kubeconfig.sh

      - name: Deploy
        run: |
          /tmp/kubectl apply -f .k8s/deployment.deploy.yml -f .k8s/service.yaml
          /tmp/kubectl -n faster rollout status deployment oteldb otelproxy --timeout=10m
  otel:
    environment: prod
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      KUBECONFIG: /tmp/kubeconfig

    # Skip deploy commit message contains #skip
    if: ${{ !contains(github.event.head_commit.message, '!skip') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Docker log in
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up kubectl cache
        uses: actions/cache@v3
        with:
          path: /tmp/kubectl
          key: kubectl-${{ env.KUBECTL_VERSION }}

      - name: Check kubectl
        id: "kubectl"
        uses: andstor/file-existence-action@v2
        with:
          files: /tmp/kubectl

      - name: Download kubectl
        if: steps.kubectl.outputs.files_exists != 'true'
        run: |
          wget -O /tmp/kubectl "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x /tmp/kubectl

      - name: Setup kubeconfig
        env:
          KUBE: ${{ secrets.KUBE }}
        run: .k8s/kubeconfig.sh

      - name: Deploy
        run: |
          /tmp/kubectl -n monitoring apply -f .k8s/otel.yml
          /tmp/kubectl -n monitoring rollout status --timeout=1m deployment otel-collector
