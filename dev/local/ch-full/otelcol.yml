receivers:
  otlp:
    protocols:
      grpc:
      http:
  fluentforward:
    endpoint: 0.0.0.0:24224
  hostmetrics:
    scrapers:
      cpu:
      disk:
      filesystem:
      load:
      memory:
      network:
      process:
      processes:
      paging:

  prometheus/compliance:
    config:
      scrape_configs:
        # For PromQL compliance tester
        # https://github.com/prometheus/compliance/tree/main/promql#promql-compliance-tester
        - job_name: 'demo'
          scrape_interval: 5s
          static_configs:
            - targets:
                - 'demo-1:8080'
                - 'demo-2:8080'
                - 'demo-3:8080'
  prometheus:
    config:
      scrape_configs:
        - job_name: otel-collector
          scrape_interval: 5s
          static_configs:
            - targets: [localhost:8888]
        - job_name: node-exporter
          scrape_interval: 5s
          static_configs:
            - targets: [node-exporter:9100]
        - job_name: prometheus
          scrape_interval: 5s
          static_configs:
            - targets: [prometheus:9090]
        - job_name: clickhouse
          scrape_interval: 5s
          static_configs:
            - targets: [clickhouse:9090]

processors:
  batch:
    timeout: 1s
    send_batch_max_size: 1024
    send_batch_size: 500
  memory_limiter:
    check_interval: 1s
    limit_mib: 256
    spike_limit_mib: 500
  resourcedetection/system:
    detectors: [ "system" ]
    system:
      hostname_sources: [ "os" ]
  # normalize between prometheus and otel
  resource/normalize:
    attributes:
      - key: instance
        from_attribute: service.instance.id
        action: insert
      - key: job
        from_attribute: service.name
        action: insert
exporters:
  clickhouse:
    endpoint: tcp://clickhouse:9000
    database: otel
    logs_table_name: otel_logs
    traces_table_name: otel_traces
    metrics_table_name: otel_metrics
    ttl_days: 1
    timeout: 10s
    sending_queue:
      queue_size: 10000
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
  otlp:
    endpoint: oteldb:4317
    tls:
      insecure: true
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true
  otlp/tempo:
    endpoint: tempo:4317
    tls:
      insecure: true
  otlp/qryn:
    endpoint: qryn-collector:4317
    tls:
      insecure: true
  prometheusremotewrite:
    endpoint: "http://prometheus:9090/api/v1/write"
    resource_to_telemetry_conversion:
      enabled: true # Convert resource attributes to metric labels
    tls:
      insecure: true
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    default_labels_enabled:
      exporter: false
      job: true
  debug:
    sampling_initial: 5
    sampling_thereafter: 200

extensions:
  health_check:
  pprof:
  zpages:

service:
  extensions: [health_check, pprof, zpages, health_check]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp, otlp/jaeger, otlp/qryn, otlp/tempo, clickhouse]
    metrics:
      receivers: [otlp, hostmetrics]
      processors: [batch]
      exporters: [otlp, prometheusremotewrite, otlp/qryn, clickhouse]
    metrics/scrape:
      receivers: [prometheus, prometheus/compliance]
      processors: [resource/normalize, batch]
      exporters: [otlp, prometheusremotewrite, otlp/qryn, clickhouse]
    logs:
      receivers: [otlp, fluentforward]
      processors: [batch]
      exporters: [otlp, otlp/qryn, loki, clickhouse]
  # https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/observability.md#how-we-expose-telemetry
  telemetry:
    metrics:
      readers:
        - periodic:
            interval: 5000
            exporter:
              otlp:
                protocol: grpc/protobuf
                endpoint: http://localhost:4317
    traces:
      processors:
        - batch:
            exporter:
              otlp:
                protocol: grpc/protobuf
                endpoint: http://localhost:4317