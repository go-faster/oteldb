version: "3"

volumes:
  prom:

services:
  clickhouse:
    image: clickhouse/clickhouse-server:23.10
    ports:
#      - "9009:9009"
      - "8123:8123"
      - "9000:9000"
    volumes:
      - ./clickhouse.xml:/etc/clickhouse-server/config.d/monitoring.xml
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', '127.0.0.1:8123/ping']
      interval: 1s
      timeout: 1s
      retries: 30

  # Add https://github.com/metrico/qryn for compatibility testing.
  qryn:
    image: qxip/qryn:latest
    ports:
      - "3101:3100"
    restart: on-failure
    environment:
      - CLICKHOUSE_SERVER=clickhouse
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=service.name=qryn
    depends_on:
      - clickhouse
  qryn-collector:
    image: ghcr.io/metrico/qryn-otel-collector:latest
    volumes:
      - ../qryncol.yml:/etc/otel/config.yaml
    restart: on-failure
    depends_on:
      - clickhouse

  # Exports traces from clickhouse internal table to otel.
  chotel:
    image: go-faster/oteldb/chotel
    restart: always
    build:
      # TODO(ernado): use just image, this should not change often
      context: ../../../
      dockerfile: chotel.Dockerfile
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=service.name=go-faster.oteldb.chotel
    depends_on:
      - clickhouse

  oteldb:
    image: go-faster/oteldb
    build:
      context: ../../../
      dockerfile: Dockerfile
    environment:
      - OTELDB_STORAGE=ch
      - CH_DSN=clickhouse://clickhouse:9000
      - OTEL_LOG_LEVEL=debug
      - METRICS_ADDR=:3201
      - OTEL_METRICS_EXPORTER=prometheus
      - OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otelcol:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=go-faster.oteldb
    ports:
      # Querier ports
      - "9090:9090"   # prometheus API
      - "3200:3200"   # tempo REST API
      # - "9095:9095"   # tempo gRPC API
      - "3100:3100"   # loki REST API
      # - "9095:9095"   # loki gRPC API
      # Receiver ports
      # - "14268:14268" # jaeger ingest
      - "4317:4317"   # otlp receiver gRPC
      - "4318:4318"   # otlp receiver http
    depends_on:
      - clickhouse

  otelfaker:
    image: go-faster/oteldb/faker
    build:
      context: ../../../
      dockerfile: otelfaker.Dockerfile
    environment:
      - OTEL_TARGET=otelcol:4317
    depends_on:
      - oteldb
      - otelcol

  # Generates traces.
  k6-tracing:
    image: ghcr.io/grafana/xk6-client-tracing:v0.0.2
    environment:
      - ENDPOINT=oteldb:4317
    restart: always
    depends_on:
      - oteldb

  # to scrape node-exporter
  # also can remote-write to otelcol
  prometheus:
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
    ports:
      - "9091:9090"
    restart: unless-stopped
    volumes:
      - ../prometheus:/etc/prometheus
      - prom:/prometheus

  # https://opentelemetry.io/docs/collector/installation/#docker-compose
  otelcol:
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.89.0
    # ports:
      # - 1888:1888 # pprof extension
      # - 8888:8888 # Prometheus metrics exposed by the Collector
      # - 8889:8889 # Prometheus exporter metrics
      # - 13133:13133 # health_check extension
      # - 14317:4317 # OTLP gRPC receiver
      # - 14318:4318 # OTLP http receiver
      # - 55679:55679 # zpages extension
    volumes:
      - ../otelcol.yml:/etc/otelcol-contrib/config.yaml
    depends_on:
      - prometheus
      - oteldb
      - node-exporter
      - jaeger
    environment:
      # probably excessive
      - OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otelcol:4317
    command:
      - '--config'
      - '/etc/otelcol-contrib/config.yaml'
      #  https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/observability.md#how-we-expose-telemetry
      - '--feature-gates=telemetry.useOtelForInternalMetrics'
      - '--feature-gates=telemetry.useOtelWithSDKConfigurationForInternalTelemetry'

  # to produce some metrics
  node-exporter:
    image: prom/node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.processes'
      - '--web.max-requests=40'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # for compatibility testing
  jaeger:
    image: jaegertracing/all-in-one:latest

  grafana:
    image: "grafana/grafana:10.0.0"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor,traceToMetrics,publicDashboards,tempoApmTable
      - GF_ALERTING_ENABLED=false
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_LEVEL=debug
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
    ports:
      - "3000:3000"
    volumes:
      - ../grafana/grafana.ini:/etc/grafana/grafana.ini
      - ../grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ../grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/default.yml
      - ../grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - oteldb
      - prometheus
      - otelcol
